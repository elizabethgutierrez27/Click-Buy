/// <reference types="node" />
import { AxiosInstance } from 'axios';
import { ApiKeys, Series } from '../types/organization/organization';
export default class Organizations {
    client: AxiosInstance;
    constructor(client: AxiosInstance);
    /**
     * Creates a new organization for your account
     * @param {Object} data - Organization data
     * @returns {Promise} Organization object
     */
    create(data: Record<string, any>): Promise<any>;
    /**
     * Gets a paginated list of organizations that belong to your account
     * @param {[Object]} params - Search parameters
     * @returns {Promise} Search results object. The object contains a `data` property with the list of organizations.
     */
    list(params?: Record<string, any> | null): Promise<any>;
    /**
     * Gets a single organization object
     * @param {string} id
     * @returns {Promise}
     */
    retrieve(id: string): Promise<any>;
    /**
     * Updates the organization's legal information
     * @param {string} id Organization Id
     * @param {Object} data
     * @returns {Promise}
     */
    updateLegal(id: string, data: Record<string, any>): Promise<any>;
    /**
     * Updates the organization's customization information
     * @param {string} id Organization Id
     * @param {Object} data Customization settings
     * @returns {Promise} Organization object
     */
    updateCustomization(id: string, data: Record<string, any>): Promise<any>;
    /**
     * Updates the organization's customization information
     * @param {string} id Organization Id
     * @param {Object} data Receipt settings
     * @returns {Promise} Organization object
     */
    updateReceiptSettings(id: string, data: Record<string, any>): Promise<any>;
    /**
     * Updates the organization's customization information
     * @param {string} id Organization Id
     * @param {Object} data Domain data
     * @returns {Promise} Organization object
     */
    updateDomain(id: string, data: Record<string, any>): Promise<any>;
    /**
     * Checks if a domain is available for self invoices
     * @param {object} data Domain data
     * @returns {Promise<{ available: boolean }>} Domain availability
     */
    checkDomainIsAvailable(data: Record<string, any>): Promise<any>;
    /**
     * Uploads the organization's logo
     * @param {string} id Organization Id
     * @param {NodeJS.ReadableStream} file Logo file
     * @returns {Promise} Organization object
     */
    uploadLogo(id: string, file: NodeJS.ReadableStream): Promise<any>;
    /**
     * Uploads the organization's certificate (CSD)
     * @param {string} id Organization Id
     * @param {NodeJS.ReadableStream} cerFile Certificate file
     * @param {NodeJS.ReadableStream} keyFile Key file
     * @param {string} password Certificate password
     * @returns {Promise} Organization object
     */
    uploadCertificate(id: string, cerFile: NodeJS.ReadableStream, keyFile: NodeJS.ReadableStream, password: string): Promise<any>;
    /**
     * Deletes the organization's certificate (CSD)
     * @param {string} id Organization Id
     * @returns {Promise} Organization object
     */
    deleteCertificate(id: string): Promise<any>;
    /**
     * Permanently removes a organization from your account.
     * @param {string} id Organization Id
     * @returns {Promise<void>} Deleted organization object
     */
    del(id: string): Promise<any>;
    /**
     * Gets the test api key for an organization
     * @param {string} id Organization Id
     * @returns {Promise<string>} Test api key
     */
    getTestApiKey(id: string): Promise<any>;
    /**
     * Renews the test api key and makes the previous one unusable
     * @param {string} id Organization Id
     * @returns {Promise<string>} New test api key
     */
    renewTestApiKey(id: string): Promise<any>;
    /**
     * List live api keys
     * @param {string} id Organization Id
     * @returns {Promise<Array<ApiKeys>>} List of live api key
     */
    listLiveApiKeys(id: string): Promise<Array<ApiKeys>>;
    /**
     * Renews the live api key and makes the previous one unusable
     * @param {string} id Organization Id
     * @returns {Promise<string>} New live api key
     */
    renewLiveApiKey(id: string): Promise<any>;
    /**
     * Delete a live api key
     * @param {string} organizationId Organization Id
     * @param {string} apiKeyId Api Key Id
     * @returns {Promise<Array<ApiKeys>>}
     */
    deleteLiveApiKey(organizationId: string, apiKeyId: string): Promise<Array<ApiKeys>>;
    /**
     * Get list of Series Organization
     * @param {string} organization_id Organization Id
     * @returns {Promise<Array<Series>>} Series object
     */
    listSeriesGroup(organization_id: string): Promise<any>;
    /**
     * Creates a Series Organization
     * @param {string} organization_id Organization Id
     * @param {Series} seriesData - Series data
     * @returns {Promise<Series>} Series object
     */
    createSeriesGroup(organization_id: string, seriesData: Series): Promise<any>;
    /**
     * Update a Series Organization
     * @param {string} organization_id Organization Id
     * @param {string} seriesName Series seriesName
     * @param {Pick<Series, 'next_folio' | 'next_folio_test'>} data - Series data
     * @returns {Promise<Series>} Series object
     */
    updateSeriesGroup(organization_id: string, seriesName: string, data: Pick<Series, 'next_folio' | 'next_folio_test'>): Promise<any>;
    /**
     * Update a Series Organization
     * @param {string} organization_id Organization Id
     * @param {string} seriesName Series seriesName
     * @param {Pick<Series, 'next_folio' | 'next_folio_test'>} data - Series data
     * @returns {Promise<Record<string, string| number>>} Series object
     */
    deleteSeriesGroup(organization_id: string, seriesName: string): Promise<any>;
}
