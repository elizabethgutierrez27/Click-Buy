/// <reference types="node" />
import { AxiosInstance } from "axios";
export default class Receipts {
    client: AxiosInstance;
    constructor(client: AxiosInstance);
    /**
     * Creates a new receipt
     * @param {Object} data Receipt data
     * @returns {Promise} Receipt object
     */
    create(data: Record<string, any>): Promise<any>;
    /**
     * Gets a paginated list of receipts that belong to your organization
     * @param {[Object]} params Search parameters
     * @returns {Promise} Search results object. The object contains a `data` property with the list of receipts.
     */
    list(params?: Record<string, any> | null): Promise<any>;
    /**
     * Gets a single receipt object
     * @param {string} id Receipt Id
     * @returns {Promise} Receipt object
     */
    retrieve(id: string): Promise<any>;
    /**
     * Creates an invoice for this receipt
     * @param {string} id Receipt Id
     * @param {Object} data Invoice data
     * @returns {Promise} Invoice object
     */
    invoice(id: string, data: Record<string, any>): Promise<any>;
    /**
     * Creates a global invoice for open receipts
     * @param {Object} data
     * @returns {Promise}
     */
    createGlobalInvoice(data: Record<string, any>): Promise<any>;
    /**
     * Marks a receipt as canceled. The receipt won't be available for invoicing anymore.
     * @param {string} id
     * @returns {Promise}
     */
    cancel(id: string): Promise<any>;
    /**
     * Sends the receipt to the customer's email
     * @param {String} id Receipt Id
     * @param {any} data Additional arguments
     * @param {String} data.email Email address to send the receipt to
     * @returns {Promise} Email sent confirmation
     */
    sendByEmail(id: string, data?: Record<string, any> | null): Promise<any>;
    /**
     * Downloads the specified receipt in PDF format
     * @param {string} id Receipt Id
     * @returns {Promise<NodeJS.ReadableStream>} PDF file in a stream
     */
    downloadPdf(id: string): Promise<NodeJS.ReadableStream>;
}
