/// <reference types="node" />
import { AxiosInstance } from 'axios';
export default class Invoices {
    client: AxiosInstance;
    constructor(client: AxiosInstance);
    /**
     * Creates a new valid invoice (CFDI).
     * @param {Object} data Invoice data
     * @returns {Promise} Invoice object
     */
    create(data: Record<string, any>, params?: Record<string, any> | null): Promise<any>;
    /**
     * Gets a paginated list of invoices created by your organization
     * @param {[Object]} params - Search parameters
     * @returns {Promise} Search results object. The object contains a `data` property with the list of invoices.
     */
    list(params?: Record<string, any> | null): Promise<any>;
    /**
     * Gets a single invoice object
     * @param {string} id Invoice Id
     * @returns {Promise} Invoice object
     */
    retrieve(id: string): Promise<any>;
    /**
     * Cancels an invoice. The invoice will not be valid anymore and will change its status to canceled.
     * @param {string} id
     * @param {any} params
     * @returns {Promise}
     */
    cancel(id: string, params: Record<string, any> | null): Promise<any>;
    /**
     * Sends the invoice to the customer's email
     * @param {String} id Invoice Id
     * @param {any} data Additional arguments
     * @param {String} data.email Email address to send the invoice to
     * @returns {Promise}
     */
    sendByEmail(id: string, data: Record<string, any> | null): Promise<any>;
    /**
     * Downloads the specified invoice in PDF format
     * @param {string} id Invoice Id
     * @returns {Promise<NodeJS.ReadableStream>} PDF file in a stream
     */
    downloadPdf(id: string): Promise<NodeJS.ReadableStream>;
    /**
     * Downloads the specified invoice in XML format
     * @param {string} id Invoice Id
     * @returns {Promise<NodeJS.ReadableStream>} XML file in a stream
     */
    downloadXml(id: string): Promise<NodeJS.ReadableStream>;
    /**
     * Downloads the specified invoice in a ZIP package containing both PDF and XML files
     * @param {string} id Invoice Id
     * @returns {Promise<NodeJS.ReadableStream>} ZIP file in a stream
     */
    downloadZip(id: string): Promise<NodeJS.ReadableStream>;
    /**
     * Downloads the cancellation receipt of a canceled invoice in XML format
     * @param {string} id Invoice Id
     * @returns {Promise<NodeJS.ReadableStream>} XML file in a stream
     */
    downloadCancellationReceiptXml(id: string): Promise<NodeJS.ReadableStream>;
    /**
     * Downloads the cancellation receipt of a canceled invoice in PDF format
     * @param {string} id Invoice Id
     * @returns {Promise<NodeJS.ReadableStream>} PDF file in a stream
     */
    downloadCancellationReceiptPdf(id: string): Promise<NodeJS.ReadableStream>;
    /**
     * Edits an invoice with "draft" status.
     * @param {string} id Invoice Id
     * @param {Object} data Invoice data to edit
     * @returns {Promise} Edited invoice
     */
    updateDraft(id: string, data: Record<string, any>): Promise<any>;
    /**
     * Stamps an invoice with "draft" status.
     * @param {string} id Invoice Id
     * @param {Object} options Query options
     * @returns {Promise} Stamped invoice
     */
    stampDraft(id: string, params?: Record<string, any> | null): Promise<any>;
    /**
     * Updates the latest status of the invoice from the SAT
     * @param {string} id Invoice Id
     * @returns {Promise} Updated invoice
     */
    updateStatus(id: string): Promise<any>;
    /**
     * Creates a draft invoice from any other invoice
     * @param {string} id Invoice Id
     * @returns {Promise} Draft invoice
     */
    copyToDraft(id: string): Promise<any>;
}
