"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Webhooks {
    constructor(client) {
        this.client = client;
    }
    /**
     * Creates a new webhook in your organization
     * @param {Object} data - Webhook options
     * @returns {Promise} Webhook object
     */
    create(data) {
        return this.client.post('/webhooks', data);
    }
    /**
     * Gets a paginated list of webhooks that belong to your organization
     * @param {[Object]} params - Search parameters
     * @returns {Promise} Search results object. The object contains a `data` property with the list of webhooks.
     */
    list(params) {
        if (!params)
            params = {};
        return this.client.get('/webhooks', { params: params });
    }
    /**
     * Gets a single webhook object
     * @param {string} id - Webhook Id
     * @returns {Promise} Webhook object
     */
    retrieve(id) {
        if (!id)
            return Promise.reject(new Error('id is required'));
        return this.client.get('/webhooks/' + id);
    }
    /**
     * Updates a webhook
     * @param {string} id - Webhook Id
     * @param {Object} data Updated webhook data
     * @returns {Promise}
     */
    update(id, data) {
        return this.client.put('/webhooks/' + id, data);
    }
    /**
     * Permanently removes a webhook from your organization.
     * @param {string} id - Webhook Id
     * @returns {Promise} Deleted webhook
     */
    del(id) {
        return this.client.delete('/webhooks/' + id);
    }
    /**
     * Validate the response of webhook with the secret and facturapi-secret
     * @param {string} secret - Webhook Secret
     * @param {string} facturapiSecret - Facturapi Secret
     * @param {object} data - Webhook data
     * @returns {Promise} Webhook object
     */
    async validateSignature(data) {
        return this.client.post('/webhooks/validate-signature', data);
    }
}
exports.default = Webhooks;
