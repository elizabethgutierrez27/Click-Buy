import { AxiosInstance } from 'axios';
export default class Webhooks {
    client: AxiosInstance;
    constructor(client: AxiosInstance);
    /**
     * Creates a new webhook in your organization
     * @param {Object} data - Webhook options
     * @returns {Promise} Webhook object
     */
    create(data: Record<string, any>): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Gets a paginated list of webhooks that belong to your organization
     * @param {[Object]} params - Search parameters
     * @returns {Promise} Search results object. The object contains a `data` property with the list of webhooks.
     */
    list(params: Record<string, any>): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Gets a single webhook object
     * @param {string} id - Webhook Id
     * @returns {Promise} Webhook object
     */
    retrieve(id: string): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Updates a webhook
     * @param {string} id - Webhook Id
     * @param {Object} data Updated webhook data
     * @returns {Promise}
     */
    update(id: string, data: Record<string, any>): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Permanently removes a webhook from your organization.
     * @param {string} id - Webhook Id
     * @returns {Promise} Deleted webhook
     */
    del(id: string): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Validate the response of webhook with the secret and facturapi-secret
     * @param {string} secret - Webhook Secret
     * @param {string} facturapiSecret - Facturapi Secret
     * @param {object} data - Webhook data
     * @returns {Promise} Webhook object
     */
    validateSignature(data: {
        secret: string;
        'facturapi-secret': string;
        payload: Record<string, unknown>;
    }): Promise<Record<string, unknown>>;
}
