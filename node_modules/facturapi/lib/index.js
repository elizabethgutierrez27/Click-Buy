"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const customers_1 = require("./resources/customers");
const products_1 = require("./resources/products");
const invoices_1 = require("./resources/invoices");
const organizations_1 = require("./resources/organizations");
const catalogs_1 = require("./tools/catalogs");
const receipts_1 = require("./resources/receipts");
const retentions_1 = require("./resources/retentions");
const webhooks_1 = require("./tools/webhooks");
const tools_1 = require("./tools/tools");
const enums = require("./enums");
const wrapper_1 = require("./wrapper");
const constants_1 = require("./constants");
const VALID_API_VERSIONS = ['v1', 'v2'];
/**
 * Get an instance of the Facturapi library
 * @class
 * @param {string} apiKey Test or Live key.
 * @returns {Facturapi} Instance of this library
 */
class Facturapi {
    static get TaxType() {
        return enums.TaxType;
    }
    static get PaymentForm() {
        return enums.PaymentForm;
    }
    static get PaymentMethod() {
        return enums.PaymentMethod;
    }
    static get InvoiceType() {
        return enums.InvoiceType;
    }
    static get InvoiceUse() {
        return enums.InvoiceUse;
    }
    static get InvoiceRelation() {
        return enums.InvoiceRelation;
    }
    static get TaxSystem() {
        return enums.TaxSystem;
    }
    constructor(apiKey, options = {}) {
        if (options.apiVersion) {
            if (!VALID_API_VERSIONS.includes(options.apiVersion)) {
                throw new Error('Invalid API version. Valid values are: ' +
                    VALID_API_VERSIONS.join(', '));
            }
            this.apiVersion = options.apiVersion;
        }
        else {
            this.apiVersion = constants_1.DEFAULT_API_VERSION;
        }
        const wrapper = (0, wrapper_1.createWrapper)(apiKey, this.apiVersion);
        this.customers = new customers_1.default(wrapper);
        this.products = new products_1.default(wrapper);
        this.invoices = new invoices_1.default(wrapper);
        this.organizations = new organizations_1.default(wrapper);
        this.catalogs = new catalogs_1.default(wrapper);
        this.receipts = new receipts_1.default(wrapper);
        this.retentions = new retentions_1.default(wrapper);
        this.tools = new tools_1.default(wrapper);
        this.webhooks = new webhooks_1.default(wrapper);
    }
}
exports.default = Facturapi;
