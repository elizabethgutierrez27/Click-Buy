/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List customers
         * @description Returns a paginated list of all customers in an organization or performs a search according to parameters.
         */
        get: operations["listCustomers"];
        put?: never;
        /**
         * Create Customer
         * @description Register a new customer in Facturapi.
         *
         *       This call validates that the fiscal data matches
         *       the records of the SAT for that RFC, otherwise the call
         *       will return an error indicating the issue.
         *
         *       Once the customer is created and a response object is obtained,
         *       we recommend saving the ID in your database along with the customer information.
         *       Later, you can call the Create Invoice endpoint by passing the customer ID instead of repeating the information.
         *
         *       Finally, keep in mind that the customers you create in the Test environment **are not shared**
         *       with the Live environment.
         *
         */
        post: operations["createCustomer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customers/{customer_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve customer by ID
         * @description Returns the 'Customer' object with the specified ID. If the customer does not exist, a 404 error will be returned.
         */
        get: operations["getCustomer"];
        /**
         * Edit Customer
         * @description Updates the information of an existing customer, setting only the values for the paramenters that are sent. Undefined values will not be modified.
         */
        put: operations["editCustomer"];
        post?: never;
        /**
         * Delete Customer
         * @description Deletes a customer. The invoices linked to the customer will **not** be deleted.
         */
        delete: operations["deleteCustomer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customers/{customer_id}/tax-info-validation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Validate Customer Tax Info
         * @description Validates that the customer's fiscal information matches the SAT records.
         *
         *     Its main function is to validate that the registered customer data continues to meet the SAT validation.
         *
         *     > **Note:**
         *     > The operations of creating a customer, editing a customer, and creating an invoice already perform a
         *     > validation of the customer's information, so it is **not** necessary to call this endpoint
         *     > before performing these operations.
         *
         */
        get: operations["validateCustomerTaxInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List products
         * @description Returns a paginated list of all products in an organization or performs a search according to parameters.
         */
        get: operations["listProducts"];
        put?: never;
        /**
         * Create Product
         * @description Register a new product or service in your Facturapi catalog.
         *
         *     You can use the product ID to create invoices without having to send all the product data each time.
         *
         *     Keep in mind that the products you create in the Test environment **are not shared**
         *     with the Live environment.
         *
         */
        post: operations["createProduct"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{product_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve product by ID
         * @description Returns the `Product` object with the specified ID. If the product does not exist, a 404 error will be returned.
         */
        get: operations["getProduct"];
        /**
         * Edit product
         * @description Updates the information of an existing product, setting only the values for the paramenters that are sent. Undefined values will not be modified.
         *
         */
        put: operations["editProduct"];
        post?: never;
        /**
         * Delete Product
         * @description Deletes the product from your organization. The invoices linked with the product **will not** be deleted.
         *
         */
        delete: operations["deleteProduct"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List invoices
         * @description Returns a paginated list of all invoices in an organization or performs a search according to parameters.
         *
         */
        get: operations["listInvoices"];
        put?: never;
        /**
         * Create invoice (CFDI 4.0)
         * @description Creates a new Invoice. If the invoice is created in the Live environment, it will be **stamped and sent to the SAT**.
         *
         */
        post: operations["createInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/{invoice_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve invoice by ID
         * @description Returns the `Invoice` object with the specified ID. If the invoice does not exist, a 404 error will be returned.
         */
        get: operations["getInvoice"];
        /**
         * Edit draft invoice
         * @description Updates the information of a draft invoice, setting only the values for
         *     the paramenters that are sent. Undefined values will not be modified.
         *
         *     In the `Invoice` response object, Facturapi will automatically assign the
         *     `is_ready_to_stamp` field with the value `true` if the invoice passes the
         *     minimum validation required to be stamped; otherwise, the
         *     `is_ready_to_stamp` field will be `false`.
         *
         */
        put: operations["updateDraftInvoice"];
        post?: never;
        /**
         * Cancel invoice
         * @description Creates a cancellation request to the SAT for the specified invoice.
         *
         *     When using this method, 3 possible results can occur:
         *
         *     - The call returns an error with the explanation of why the cancellation could not be completed.
         *     - The call is successful and returns an `invoice` object with the property `status: "canceled"`.
         *     - The call is successful, but the cancellation requires confirmation from your client, in which case the response will be the `invoice` object with the properties `status: "valid"` and `cancellation_status: "pending"`.
         *
         *     In the third scenario, the value of `cancellation_status` will be automatically updated by Facturapi when your client accepts, rejects, or lets the request expire, so that when you query an invoice (using [Get Invoice](#operation/getInvoice)), the `cancellation_status` property will reflect the most recent status of the request.
         *
         *     Check the possible values of `cancellation_status` below.
         *
         *     After the cancellation, the invoice will no longer be valid, the object will change its `status` to `"canceled"` and will still be available for future queries.
         *
         *     If the status of the invoice is `draft`, this method will delete it from the database.
         *
         *     If the status of the invoice is `canceled`, this method will return an error.
         *
         */
        delete: operations["cancelInvoice"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/{invoice_id}/copy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Copy to draft
         * @description Creates a new draft invoice with the same information as the specified invoice.
         *
         */
        post: operations["copyToDraftInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/{invoice_id}/stamp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stamp draft invoice
         * @description Stamps a draft invoice and sends it to the SAT for validation.
         *
         *     When using this method, the value of the `is_ready_to_stamp` field (assigned by Facturapi)
         *     must be `true`. Otherwise, the call will return an error. To get the value of `is_ready_to_stamp`,
         *     use the [Get Invoice](#operation/getInvoice) method.
         *
         *     This method does not allow editing the invoice, only stamping it. If you need to edit
         *     information in the invoice before stamping it, use the [Edit Draft Invoice](#operation/editDraftInvoice) method.
         *
         */
        post: operations["stampDraftInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/{invoice_id}/cancellation_receipt/{format}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Cancellation receipt
         * @description Download the cancellation receipt of a canceled invoice in an xml or pdf file.
         */
        get: operations["downloadCancellationReceiptXml"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/{invoice_id}/{format}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download invoice
         * @description Download your invoice in PDF, XML, or both in a ZIP file.
         */
        get: operations["downloadInvoice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/{invoice_id}/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send invoice by email
         * @description Sends an email to the address of your client with the XML and PDF files attached to the message.
         *
         */
        post: operations["sendInvoiceByEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/{invoice_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update invoice status
         *
         * @description Consults the status of a stamped invoice at the SAT and updates the invoice object with the most recent information.
         *
         */
        put: operations["updateInvoiceStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List e-recipts
         * @description Returns a paginated list of all the receipts of an organization or performs a search according to parameters.
         *
         */
        get: operations["listReceipts"];
        put?: never;
        /**
         * Create e-receipt
         * @description Creates a new e-Receipt, which acts as a sales note.
         *
         *     Every receipt will have an auto-generated URL that the client can visit to fill in their fiscal data in a microsite with the organization's branding.
         *
         */
        post: operations["createReceipt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipts/{receipt_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve e-receipt by ID
         * @description Retrieves an e-Receipt by its ID.
         *
         */
        get: operations["getReceipt"];
        put?: never;
        post?: never;
        /**
         * Cancel e-receipt
         * @description Cancel a receipt by changing its `status` property to `"canceled"`.
         *
         *     Once canceled, the receipt cannot be invoiced.
         *
         */
        delete: operations["cancelReceipt"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipts/{receipt_id}/pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download PDF
         * @description Download the electronic receipt in PDF format.
         */
        get: operations["downloadReceiptPdf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipts/{receipt_id}/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send e-receipt by email
         * @description Send the e-receipt by email to the customer.
         *
         *     The email sent will be customized with the logo and colors of the organization that created it,
         *     and will include a button to invoice the receipt, as well as the receipt attached as a PDF to the message.
         *
         */
        post: operations["sendReceiptByEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipts/{receipt_id}/invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Convert e-receipt to invoice
         * @description Creates a new invoice from a receipt. Once invoiced, the receipt's `status` will change to `"invoiced_to_customer"`.
         *
         *     Only open receipts (`status = "open"`) can be invoiced.
         *
         */
        post: operations["invoiceReceipt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipts/global-invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create global invoice
         * @description Creates a global invoice that will include all receipts with `status = "open"` from a certain period.
         *
         */
        post: operations["createGlobalInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/retentions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List retentions
         * @description Returns a paginated list of all the retentions of an organization or performs a search according to parameters.
         *
         */
        get: operations["listRetentions"];
        put?: never;
        /**
         * Create retention
         * @description Create a new Retention. If the invoice is created in Live environment, it will be **stamped and sent to SAT**.
         *
         */
        post: operations["createRetention"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/retentions/{retention_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve retention by ID
         * @description Retrieves a retention by its ID.
         *
         */
        get: operations["getRetention"];
        put?: never;
        post?: never;
        /**
         * Cancel retention
         * @description Request a cancellation of a retention from the SAT.
         *
         *     Unlike regular invoices, retention cancellations are immediate and do not require authorization from the recipient.
         *
         */
        delete: operations["cancelRetention"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/retentions/{retention_id}/{format}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download retention
         * @description Download a retention in PDF, XML or both in a ZIP file.
         */
        get: operations["downloadRetention"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/retentions/{retention_id}/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send retention by email
         * @description Send an email to the customer's address with the XML and PDF files attached to the message.
         *
         */
        post: operations["sendRetentionByEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List organizations
         * @description Returns a paginated list of all the organizations registered under your account, or performs a search according to parameters.
         *
         */
        get: operations["listOrganizations"];
        put?: never;
        /**
         * Create organization
         * @description Create a new Organization that will belong to your user account.
         *
         *     After creating the organization and before being able to issue invoices
         *     with the organization, you will need to finish setting it up by calling
         *     the [Update legal data](#operation/editOrganizationLegal) and
         *     [Upload certificates (CSD)](#operation/uploadOrganizationCertificate) methods.
         *
         *     Remember that the stamps of your subscription can be consumed by any of
         *     the organizations registered under your account.
         *
         */
        post: operations["createOrganization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/legal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Edit legal data
         * @description Update the legal information of the organization.
         *
         *     If you are looking for how to edit the RFC, remember that the `tax_id`
         *     property is automatically assigned when uploading the user's certificates
         *     (Certificado de Sello Digital or CSD).
         *
         */
        put: operations["editOrganizationLegal"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/certificate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Upload certificates (CSD)
         * @description Upload the files of the Digital Seal Certificate (Certificado de Sello Digital or CSD) provided by the SAT.
         *
         *     This call should also be used to replace existing certificates in case new ones are requested.
         *
         *     When updating your certificates, the RFC will be read and automatically assigned to `legal.tax_id`.
         *
         *     > **Don't use this endpoint to upload the FIEL certificate.**
         *     > The CSD is different from the FIEL certificate (Firma Electrónica). Please ask your accountant for the CSD.
         *
         */
        put: operations["uploadOrganizationCertificate"];
        post?: never;
        /**
         * Delete certificates (CSD)
         * @description Removes the certificates (CSD) from your organization.
         *
         *     Deleting the certificates will not affect the invoices already issued, but you will not be able to issue new invoices until you upload new certificates.
         *
         */
        delete: operations["deleteOrganizationCertificate"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/logo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Upload logo
         * @description Upload the organization's logo. The logo will be displayed on the PDFs and emails sent to your customers.
         *
         *     The file must be an image in JPG or PNG format and have a size not greater than 500 KB. The recommended dimensions are 800 × 500px.
         *
         *     If the organization already has a logo, this call replaces the previous logo.
         *
         */
        put: operations["uploadOrganizationLogo"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/customization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Edit customization
         * @description Update the information related to the organization's identity or branding.
         *
         */
        put: operations["editOrganizationCustomization"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/receipts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Edit receipts settings
         * @description Update the organization's receipts settings.
         *
         */
        put: operations["editOrganizationReceiptsSettings"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/domain-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check domain availability
         * @description Check if an identifier is available to choose as a domain for the autofactura portal.
         *
         */
        get: operations["checkDomainAvailability"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/domain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Choose self-invoice domain
         * @description Choose the domain that this organization will use in its self-invoice microsite.
         *     Once you choose the domain, you must contact us if you need to change it.
         *
         *     The domain you choose will be the one that appears in the `self_invoice_url`
         *     field when creating a new receipt, as follows:
         *
         *     `https://factura.space/{DOMAIN}/{RECEIPT_KEY}`
         *
         */
        put: operations["editOrganizationDomain"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve organization by ID
         * @description Retrieve the organization by its ID.
         *
         */
        get: operations["getOrganization"];
        put?: never;
        post?: never;
        /**
         * Delete organization
         * @description Delete the organization from your Facturapi account. Once deleted, you
         *     will not be able to access its resources, such as clients, products,
         *     invoices, receipts, or retentions.
         *
         */
        delete: operations["deleteOrganization"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/apikeys/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Test API Key
         * @description Retrieve API Key for the Test environment of the organization.
         *
         */
        get: operations["getTestApiKey"];
        /**
         * Renew Test API Key
         * @description Renew the Test environment secret key of the organization and immediately invalidate the previous one.
         *
         */
        put: operations["renewTestApiKey"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/apikeys/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Renew Live API Key
         * @description Generate a new Live environment secret key for the organization.
         *     This operation does not invalidate previously generated keys.
         *
         */
        put: operations["renewLiveApiKey"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List webhooks
         * @description Returns a list of webhooks created previously for the organization.
         *
         */
        get: operations["listWebhooks"];
        put?: never;
        /**
         * Create webhook
         * @description Register a new webhook in your Facturapi organization.
         *
         *     Use this call to receive notifications of asynchronous events to the API.
         *
         *     Test and live environment webhooks are independent.
         *
         */
        post: operations["createWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/{webhook_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve webhook by ID
         * @description Retrieve the webhook subscription by its ID.
         *
         */
        get: operations["getWebhook"];
        /**
         * Edit webhook
         * @description Update the information of an existing webhook with the parameters you send in the request.
         *
         */
        put: operations["editWebhook"];
        post?: never;
        /**
         * Delete Webhook
         * @description Deletes the webhook subscription from the organization.
         *
         */
        delete: operations["deleteWebhook"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check
         * @description Check the health of the Facturapi API.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description API is operational */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            ok?: boolean;
                        };
                    };
                };
                /** @description Error de autenticación. Asegúrate de estar usando tu llave secreta. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Servicio temporalmente no disponible. */
                502: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tools/tax_id_validation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Validate RFC (tax_id)
         * @description Check the status of an RFC in the list of **EFOS** (Empresas que
         *     Facturan Operaciones Simuladas). When appearing in this list, the RFC is
         *     or was suspected of engaging in simulated fiscal operations (factureras).
         *
         *     The response (detailed below) includes the results of this validation.
         *     It includes the boolean property `is_valid`, which Facturapi resolves by
         *     interpreting the response. A value of `true` for this property indicates
         *     that the RFC has no issues to resolve and is free of problems; and the
         *     opposite for `false`.
         *
         *     Additionally, you can check the `data` property to see the raw values of
         *     the query to the SAT.
         *
         */
        get: {
            parameters: {
                query: {
                    tax_id: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Validation result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaxIdValidationResult"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthenticated"];
                500: components["responses"]["UnexpectedError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalogs/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Product/Service Key
         * @description Search in the SAT Product/Service catalog, which contains the key to include in the invoice.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Text search. Text to search in the product/service classification description. */
                    q?: string;
                    /** @description Page of results to return, starting from page 1. */
                    page?: components["parameters"]["SearchPage"];
                    /** @description Number from 1 to 100 representing the maximum amount of results to return for pagination purposes. */
                    limit?: components["parameters"]["SearchLimit"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Search results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProductCatalogSearchResult"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthenticated"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["UnexpectedError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalogs/units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Units of Measure
         * @description Search in the SAT Units of Measure catalog.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Query. Text to search in the description of the unit of measure. */
                    q?: string;
                    /** @description Page of results to return, starting from page 1. */
                    page?: components["parameters"]["SearchPage"];
                    /** @description Number from 1 to 100 representing the maximum amount of results to return for pagination purposes. */
                    limit?: components["parameters"]["SearchLimit"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Search results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnitCatalogSearchResult"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthenticated"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["UnexpectedError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        EventBase: {
            /** @description ID of the event */
            id?: string;
            /**
             * Format: date-time
             * @description Creation date and time of the event
             */
            created_at?: string;
            /** @description Indicates if the event was generated in Test mode (false) or Live mode (true). */
            livemode?: boolean;
            /** @description ID of the organization this event is related to */
            organization?: string;
        };
        DateRange: {
            /**
             * Greater than
             * Format: date-time
             * @description Lower exclusive limit of the date range to request.
             */
            gt?: string;
            /**
             * Greater than or equals
             * Format: date-time
             * @description Lower inclusive limit of the date range to request.
             */
            gte?: string;
            /**
             * Lesser than
             * Format: date-time
             * @description Upper exclusive limit of the date range to request.
             */
            lt?: string;
            /**
             * Lesser than or equals
             * Format: date-time
             * @description Upper inclusive limit of the date range to request.
             */
            lte?: string;
        };
        GenericError: {
            /**
             * Error description
             * @description Indicates what went wrong and may include a suggestion on how to fix the error.
             */
            message?: string;
        };
        SearchResult: {
            /**
             * Página
             * @description The current page number within the search results
             * @example 1
             */
            page?: number;
            /**
             * Total pages
             * @description The total number of pages available in the search results
             * @example 1
             */
            total_pages?: number;
            /**
             * Total results
             * @description The total number of results available in the search
             * @example 1
             */
            total_results?: number;
        };
        ResourceAutoGeneratedProps: {
            /**
             * @description ID of the object
             * @example 590ce6c56d04f840aa8438af
             */
            id: string;
            /**
             * Format: date-time
             * @description Creation date and time
             * @example 2017-05-05T20:55:33.468Z
             */
            created_at: string;
            /**
             * @description Indicates if the object was created in Live mode (true) or Test mode (false).
             * @example false
             */
            livemode: boolean;
        };
        TaxIdValidationResult: {
            /** @description Result of the validation in the list of Companies that
             *     Issue Simulated Operations (factureras or EFOS) of the SAT.
             *      */
            efos?: {
                /**
                 * @description Indicates if the RFC has any issues related to this list.
                 *     `true`: The RFC is not in the EFOS list or its situation was
                 *     appealed and resulted in a favorable outcome. `false`: The RFC
                 *     is registered as "Presumed" or "Definitive" in the EFOS list.
                 *
                 * @example true
                 */
                is_valid?: boolean;
                /** @description Object with the result of the search at the SAT.
                 *     All the information contained in this object comes from the SAT.
                 *      */
                data?: {
                    /** @description Available only when the RFC was not found in the list,
                     *     which is good.
                     *      */
                    mensaje?: string;
                    /**
                     * @description Text indicating the date of the list update.
                     * @example Information updated on September 17, 2023
                     */
                    fechaLista?: string;
                    /** @description Array with the details of the search in the EFOS list. */
                    detalles?: {
                        /**
                         * @description The RFC consulted, as a confirmation.
                         * @example NOR170627727
                         */
                        rfc?: string;
                        /**
                         * @description Taxpayer's fiscal name.
                         * @example NORMANDIA FERRE,
                         */
                        razonSocial?: string;
                        /**
                         * @description Text indicating the current situation. Check
                         *     [this table](#situación-del-contribuyente) for details on the possible values.
                         *
                         * @example Definitivo
                         */
                        situacionContribuyente?: string;
                        /**
                         * @description Text with identifier and date of the presumption report.
                         * @example 500-05-2020-23758 de fecha 03 de noviembre de 2020
                         */
                        numFechaPresuncion?: string;
                        /**
                         * Format: DD/MM/YYYY
                         * @description Date of publication of the presumption.
                         * @example 03/11/2020
                         */
                        pubFechaSatPresuntos?: string;
                        /**
                         * @description Text with identifier and date of publication in the global presumption list.
                         * @example 500-05-2020-23758 de fecha 03 de noviembre de 2020
                         */
                        numGlobalPresuncion?: string;
                        /**
                         * Format: DD/MM/YYYY
                         * @description Date of publication in the Official Gazette of the Federation (DOF).
                         * @example 18/11/2020
                         */
                        pubFechaDofPresuntos?: string;
                        /**
                         * @description Text with identifier of the publication of the "Definitive" status.
                         * @example 500-05-2021-151
                         */
                        pubSatDefinitivos?: string;
                        /**
                         * Format: DD/MM/YYYY
                         * @description Date of publication of the "Definitive" status in the DOF.
                         * @example 25/05/2021
                         */
                        pubDofDefinitivos?: string;
                        /**
                         * @description Text with identifier and date of favorable sentence.
                         * @example 500-05-2021-15156 de fecha 25 de mayo de 2021
                         */
                        numFechaSentFav?: string;
                        /**
                         * Format: DD/MM/YYYY
                         * @description Date of favorable sentence.
                         * @example 08/06/2021
                         */
                        pubSatSentFav?: string;
                    }[];
                };
            };
        };
        ProductCatalogResult: {
            /**
             * @description Key from the SAT catalog
             * @example 60131324
             */
            key?: string;
            /**
             * @description Description
             * @example Ukelele
             */
            description?: string;
            /**
             * @description Number from 0 to 1 representing the level of match of the
             *     result with respect to the search query.
             *
             * @example 0.8
             */
            score?: number;
        };
        UnitCatalogResult: {
            /**
             * @description Key from the SAT catalog
             * @example INH
             */
            key?: string;
            /**
             * @description Description
             * @example Pulgada
             */
            description?: string;
            /**
             * @description Number from 0 to 1 representing the level of match of the
             *     result with respect to the search query.
             *
             * @example 0.9
             */
            score?: number;
        };
        ProductCatalogSearchResult: components["schemas"]["SearchResult"] & {
            data?: components["schemas"]["ProductCatalogResult"][];
        };
        UnitCatalogSearchResult: components["schemas"]["SearchResult"] & {
            data?: components["schemas"]["UnitCatalogResult"][];
        };
        LocalTax: {
            /**
             * @description Tax rate in decimal format.
             * @example 0.1
             */
            rate: number;
            /**
             * @description Tax base amount.
             * @default 100% of subtotal
             */
            base: number;
            /** @description Tax name. Free text. */
            type: string;
            /**
             * @description Indicates if it is a withholding tax (`true`) or a transferred tax (`false`).
             * @default false
             */
            withholding: boolean;
        };
        /** Tax */
        BaseTax: {
            /**
             * @description Tax rate in decimal format.
             * @example 0.16
             */
            rate: number;
            /**
             * @description Tax base amount.
             * @default 100% of subtotal
             */
            base: number;
            /**
             * @description Type of tax
             * @default IVA
             * @enum {string}
             */
            type: "IVA" | "ISR" | "IEPS";
            /**
             * @description Factor type. Tasa (rate), Cuota (amount), or Exento (exempt).
             * @default Tasa
             * @enum {string}
             */
            factor: "Tasa" | "Cuota" | "Exento";
            /**
             * @description Indicates if it is a withholding tax (`true`) or a transferred tax (`false`).
             * @default false
             */
            withholding: boolean;
        };
        IepsTax: Omit<components["schemas"]["BaseTax"], "type"> & {
            /**
             * @description Indicates in which way the tax is calculated.
             *
             *     `"sum_before_taxes"`: Apply the IEPS to the subtotal first and use the result as the base for the rest of the taxes in the product.
             *
             *     `"break_down"`: Charge and break down the IEPS at the same level as the rest of the taxes in the product.
             *
             *     `"unit"`: Apply the IEPS before the unit price, and use the original unit price as the base for the rest of the taxes.
             *
             *     `"subtract_before_break_down"`: Apply the IEPS only to calculate taxes like IVA de traslado and retentions, and use the original unit price as the base for the rest of the taxes.
             *
             *     Consult with your accountant which case applies to your company and product.
             *
             * @default sum_before_taxes
             * @enum {string}
             */
            ieps_mode: "sum_before_taxes" | "break_down" | "unit" | "subtract_before_break_down";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "IEPS";
        };
        /** @description Information about the digital stamp added by the PAC. */
        Stamp: {
            /** @description Digital signature of the fiscal document. */
            signature?: string;
            /**
             * Format: date-time
             * @description Stamp date in ISO8601 format (UTC String).
             */
            date?: string;
            /** @description SAT certificate serial number used for stamping. */
            sat_cert_number?: string;
            /** @description Digital stamp of the fiscal document. */
            sat_signature?: string;
        };
        LineItem: {
            /**
             * @description Quantity of units included in the same concept.
             * @example 1
             */
            quantity?: number;
            /**
             * @description Total discount amount applied to this concept.
             * @example 0
             */
            discount?: number;
            /** @description Object with information about the product or service invoiced.
             *      */
            product?: components["schemas"]["LineItemProduct"];
            /** @description Object with information about the parts conforming this item or product. */
            parts?: components["schemas"]["Parts"];
        };
        /** @description Object with information about the third-party contributor, on behalf of whom the operation is carried out.
         *
         *     Corresponds to the "ACuentaTerceros" field in the CFDI.
         *      */
        ThirdParty: {
            /**
             * @description Name or business name of the third party.
             * @example The Michael Scott Paper Company
             */
            legal_name?: string;
            /**
             * @description RFC of the third party.
             * @example MIC920101HN7
             */
            tax_id?: string;
            /**
             * @description Fiscal regime of the third party.
             * @example 601
             */
            tax_system?: string;
            /**
             * @description Postal code of the third party.
             * @example 01234
             */
            zip?: string;
        };
        /**
         * LineItem
         * @description Concepts included in the document
         */
        LineItemInput: {
            /**
             * @description Quantity of units included in the same concept.
             * @default 1
             * @example 1
             */
            quantity: number;
            /**
             * @description Total discount amount applied to this concept.
             * @default 0
             * @example 0
             */
            discount: number;
            /** @description Object with information about the product or service invoiced. */
            product: components["schemas"]["LineItemProductInput"] | string;
            parts?: components["schemas"]["PartInput"][];
            /** @description Customs entry numbers (pedimento) associated with this concept. */
            customs_keys?: string[];
            /**
             * Format: xml
             * @description XML code of your complement.
             */
            complement?: string;
            third_party?: Record<string, never> & components["schemas"]["ThirdParty"];
            /**
             * @description Bank account number for property tax.
             * @example 0102030405
             */
            property_tax_account?: string;
        };
        /**
         * LineItem
         * @description Concepts included in the document
         */
        LineItemEgresoInput: {
            /**
             * @description Quantity of units included in the same concept.
             * @default 1
             * @example 1
             */
            quantity: number;
            /**
             * @description Total discount amount applied to this concept.
             * @default 0
             * @example 0
             */
            discount: number;
            /** @description Object with information about the product or service invoiced. */
            product: components["schemas"]["LineItemProductEgresoInput"] | string;
            parts?: components["schemas"]["PartInput"][];
            /** @description Customs entry numbers (pedimento) associated with this concept. */
            customs_keys?: string[];
            /**
             * Format: xml
             * @description XML code of your complement.
             */
            complement?: string;
            third_party?: Record<string, never> & components["schemas"]["ThirdParty"];
        };
        /**
         * LineItem
         * @description Concepts included in the document
         */
        LineItemTrasladoInput: {
            /**
             * @description Quantity of units included in the same concept.
             * @default 1
             * @example 1
             */
            quantity: number;
            /** @description Object with information about the product or service invoiced. */
            product: components["schemas"]["LineItemTrasladoProductInput"] | string;
            /** @description Customs entry numbers (pedimento) associated with this concept. */
            customs_keys?: string[];
            /**
             * Format: xml
             * @description XML code of your complement.
             */
            complement?: string;
            parts?: components["schemas"]["PartInput"][];
            third_party?: {
                /**
                 * @description Name or business name of the third party.
                 * @example The Michael Scott Paper Company
                 */
                legal_name: string;
                /**
                 * @description RFC of the third party.
                 * @example STA920101HN7
                 */
                tax_id: string;
                /**
                 * @description Fiscal regime of the third party.
                 * @example 601
                 */
                tax_system: string;
                /**
                 * @description Postal code of the third party.
                 * @example 01234
                 */
                zip: string;
            };
        };
        /**
         * string
         * Format: xml
         * @description XML code of your complement as you want it to be inserted in the XML. It must contain only one root XML node.
         */
        CustomComplementData: string;
        /** CustomComplement */
        CustomComplementProperties: {
            /**
             * @description Type of complement.
             * @enum {string}
             */
            type?: "custom";
            data?: components["schemas"]["CustomComplementData"];
        };
        /** CustomComplement */
        CustomComplementInput: Record<string, never> & components["schemas"]["CustomComplementProperties"];
        /**
         * NominaComplementData
         * @description Object with the information of the payroll complement.
         *
         */
        NominaComplementDataInput: Record<string, never> & components["schemas"]["NominaComplementDataDirectProperties"] & components["schemas"]["NominaComplementDataNestedInput"];
        /** @description Payroll (nómina) complement */
        NominaComplementDataProperties: components["schemas"]["NominaComplementDataDirectProperties"] & components["schemas"]["NominaComplementDataNestedProperties"];
        NominaComplementDataDirectProperties: {
            /**
             * @description Type of payroll.
             *     - `"O"` (Ordinary): For payments made in a regular manner, such as salaries.
             *     - `"E"` (Extraordinary): For payments outside the ordinary, such as settlements, bonuses, or Christmas bonuses.
             *
             * @default O
             * @enum {string}
             */
            tipo_nomina: "O" | "E";
            /**
             * Format: date
             * @description Payment date of the payroll to the worker.
             * @default now
             */
            fecha_pago: string;
            /**
             * Format: date
             * @description Initial date of the payment period.
             */
            fecha_inicial_pago?: string;
            /**
             * Format: date
             * @description Final date of the payment period.
             */
            fecha_final_pago?: string;
            /** @description Number of days paid. It can be an integer or a fraction. */
            num_dias_pagados?: number;
        };
        NominaComplementDataNestedInput: {
            emisor?: components["schemas"]["NominaEmisorProperties"];
            receptor?: components["schemas"]["NominaReceptorInput"];
            percepciones?: components["schemas"]["NominaPercepcionesInput"];
            /** @description Array of objects where applicable deductions are detailed. */
            deducciones?: components["schemas"]["NominaDeduccionInput"][];
            /** @description Array of objects where other applicable payments are detailed. */
            otros_pagos?: (components["schemas"]["NominaOtroPagoInput"] & {
                compensacion_saldos_a_favor?: components["schemas"]["NominaCompensacionInput"];
            })[];
            /** @description Array of objects with information about paid incapacities. */
            incapacidades?: components["schemas"]["NominaIncapacidadInput"][];
        };
        NominaComplementDataNestedProperties: {
            emisor?: components["schemas"]["NominaEmisorProperties"];
            receptor?: components["schemas"]["NominaReceptorProperties"];
            percepciones?: components["schemas"]["NominaPercepcionesProperties"];
            /** @description Array of objects where applicable deductions are detailed. */
            deducciones?: components["schemas"]["NominaDeduccionProperties"][];
            /** @description Array of objects where other applicable payments are detailed. */
            otros_pagos?: (components["schemas"]["NominaOtroPagoDirectProperties"] & {
                compensacion_saldos_a_favor?: components["schemas"]["NominaCompensacionProperties"];
            })[];
            /** @description Array of objects with information about paid incapacities. */
            incapacidades?: components["schemas"]["NominaIncapacidadProperties"][];
        };
        /** Incapacidad */
        NominaIncapacidadInput: Record<string, never> & components["schemas"]["NominaIncapacidadProperties"];
        NominaIncapacidadProperties: {
            /** @description Number of days the worker was incapacitated in the period. */
            dias_incapacidad?: number;
            /** @description Key from the catalog [Type of incapacity](#tipo-de-incapacidad). */
            tipo_incapacidad?: string;
            /** @description Monetary amount of the paid incapacity. */
            importe_monetario?: number;
        };
        /** OtroPago */
        NominaOtroPagoInput: Record<string, never> & components["schemas"]["NominaOtroPagoDirectProperties"] & {
            compensacion_saldos_a_favor?: components["schemas"]["NominaCompensacionInput"];
        };
        NominaOtroPagoDirectProperties: {
            /** @description Key from the catalog [Type of Other Payment](#tipo-de-otro-pago). */
            tipo_otro_pago?: string;
            /** @description Key of another payroll payment, specific to each employer's accounting. */
            clave?: string;
            /** @description Alternative description corresponding to the key used. */
            concepto?: string;
            /** @description Amount for another payment concept. */
            importe?: number;
            /** @description Caused subsidy according to the subsidy table for employment
             *     published in Annex 8 of the current Fiscal Miscellaneous Resolution.
             *
             *     This value will be inserted within the `SubsidioAlEmpleo` node, and is
             *     required when the value of `tipo_otro_pago` is `"002"`.
             *      */
            subsidio_causado?: number;
        };
        NominaCompensacionInput: Record<string, never> & components["schemas"]["NominaCompensacionProperties"];
        /** @description Object with information about the compensation of balances in favor of a worker. */
        NominaCompensacionProperties: {
            /** @description Amount for a balance in favor determined by the employer to the worker in previous periods or exercises. */
            saldo_a_favor?: number;
            /** @description Year in which the balance in favor of the worker was determined. */
            ano?: number;
            /** @description Remaining balance in favor of the worker. */
            remanente_sal_fav?: number;
        };
        /** Deduccion */
        NominaDeduccionInput: Record<string, never> & components["schemas"]["NominaDeduccionProperties"];
        NominaDeduccionProperties: {
            /** @description Key from the catalog [Type of deduction](#tipo-de-deducción). */
            tipo_deduccion?: string;
            /** @description Deduction concept. If not sent, the description of the deduction type catalog will be used. */
            concepto?: string;
            /** @description Internal control key assigned by the employer to each deduction (discount) of payroll specific to its accounting. */
            clave?: string;
            /** @description Amount of the deduction. */
            importe?: number;
        };
        /**
         * Percepciones
         * @description Object to indicate the applicable earnings.
         */
        NominaPercepcionesInput: {
            /** @description Object with detailed information of each earning. */
            percepcion: components["schemas"]["NominaPercepcionInput"][];
            jubilacion_pension_retiro?: components["schemas"]["NominaJubilacionInput"];
            separacion_indemnizacion?: components["schemas"]["NominaSeparacionInput"];
        };
        /**
         * Percepciones
         * @description Object to indicate the applicable earnings.
         */
        NominaPercepcionesProperties: {
            /** @description Object with detailed information of each earning. */
            percepcion?: components["schemas"]["NominaPercepcionProperties"][];
            jubilacion_pension_retiro?: components["schemas"]["NominaJubilacionProperties"];
            separacion_indemnizacion?: components["schemas"]["NominaSeparacionProperties"];
        };
        /** Separacion */
        NominaSeparacionInput: Record<string, never> & components["schemas"]["NominaSeparacionProperties"];
        /**
         * Jubilacion
         * @description Object with detailed information of payments for separation (dismissal) or compensation.
         */
        NominaSeparacionProperties: {
            /** @description Total amount paid for separation or compensation. */
            total_pagado?: number;
            /** @description Number of years of service worked by the worker, rounded up to the nearest whole number. */
            num_anos_servicio?: number;
            /** @description Last ordinary monthly salary received by the worker. */
            ultimo_sueldo_mens_ord?: number;
            /** @description Amount for accumulable income. */
            ingreso_acumulable?: number;
            /** @description Amount for non-accumulable income. */
            ingreso_no_acumulable?: number;
        };
        /** Jubilacion */
        NominaJubilacionInput: Record<string, never> & components["schemas"]["NominaJubilacionProperties"];
        /** @description Object with detailed information of payments for retirement, pensions, or retirement benefits. */
        NominaJubilacionProperties: {
            /** @description Total amount paid in a single installment. */
            total_una_exhibicion?: number;
            /** @description Total amount paid in separate installments. */
            total_parcialidad?: number;
            /** @description Daily amount received by the worker when the payment is made in installments. */
            monto_diario?: number;
            /** @description Accumulable income received by the worker. */
            ingreso_acumulable?: number;
            /** @description Non-accumulable income received by the worker. */
            ingreso_no_acumulable?: number;
        };
        /** Percepcion */
        NominaPercepcionProperties: components["schemas"]["NominaPercepcionDirectProperties"] & components["schemas"]["NominaPercepcionNestedProperties"];
        /** Percepcion */
        NominaPercepcionInput: Record<string, never> & components["schemas"]["NominaPercepcionDirectProperties"] & components["schemas"]["NominaPercepcionNestedInput"];
        NominaPercepcionDirectProperties: {
            /** @description Key from the catalog [Type of earnings](#tipo-de-percepcion). */
            tipo_percepcion?: string;
            /** @description Earnings concept. If not sent, the description of the earnings type catalog will be used. */
            concepto?: string;
            /** @description Internal control key assigned by the employer to each payroll earning specific to its accounting. */
            clave?: string;
            /** @description Taxable amount for the concept indicated in the type of earnings. */
            importe_gravado?: number;
            /** @description Exempt amount for the concept indicated in the type of earnings. */
            importe_exento?: number;
        };
        NominaPercepcionNestedInput: {
            acciones_o_titulos?: components["schemas"]["NominaAccionesInput"];
            /** @description Array of objects to express applicable extra hours. Required when the type of earnings is "019" (Extra hours). */
            horas_extra?: components["schemas"]["NominaHorasExtraInput"][];
        };
        NominaPercepcionNestedProperties: {
            acciones_o_titulos?: components["schemas"]["NominaAccionesProperties"];
            /** @description Array of objects to express applicable extra hours. Required when the type of earnings is "019" (Extra hours). */
            horas_extra?: components["schemas"]["NominaHorasExtraProperties"][];
        };
        /** HorasExtra */
        NominaHorasExtraInput: Record<string, never> & components["schemas"]["NominaHorasExtraProperties"];
        /** HorasExtra */
        NominaHorasExtraProperties: {
            /** @description Number of days the worker worked extra hours in addition to their normal working day. */
            dias?: number;
            /** @description Key from the catalog [Type of Hours](#tipo-de-Horas). */
            tipo_horas?: string;
            /** @description Number of extra hours worked in the period. */
            horas_extra?: number;
            /** @description Amount paid for extra hours. */
            importe_pagado?: number;
        };
        /** Accion */
        NominaAccionesInput: Record<string, never> & components["schemas"]["NominaAccionesProperties"];
        /**
         * Accion
         * @description Object to express earnings from shares or securities representing goods. It is required when there are earnings from salaries derived from the acquisition of shares or securities.
         */
        NominaAccionesProperties: {
            /** @description Market value of the shares or securities when the option is exercised. */
            valor_mercado?: number;
            /** @description Price established when the option of income in shares or securities is granted. */
            precio_al_otorgarse?: number;
        };
        /**
         * Receptor
         * @description Worker information.
         */
        NominaReceptorProperties: components["schemas"]["NominaReceptorDirectProperties"] & components["schemas"]["NominaReceptorNestedProperties"];
        /**
         * Receptor
         * @description Worker information.
         */
        NominaReceptorInput: Record<string, never> & components["schemas"]["NominaReceptorDirectProperties"] & components["schemas"]["NominaReceptorNestedInput"];
        NominaReceptorDirectProperties: {
            /** @description Worker's CURP (Clave Única de Registro de Población) (Unique Population Registry Code). */
            curp?: string;
            /** @description Social security number. */
            num_seguridad_social?: string;
            /**
             * Format: date
             * @description Start date of the employment relationship between the employer and
             *     the employee.
             *
             */
            fecha_inicio_rel_laboral?: string;
            /**
             * @description Employee's seniority in the format specified by the SAT. If a
             *     `string` is sent, it is expected to contain the seniority in the
             *     format specified by the SAT. If the boolean value `false` is sent,
             *     this field will not be included in the invoice. If the boolean
             *     value `true` and `fecha_inicio_rel_laboral` exist, this value will
             *     be calculated with the difference between the start date of the
             *     employment relationship and the payment date.
             *
             * @default true
             */
            antiguedad: string | boolean;
            /** @description Key from the catalog [Type of Contract](#tipo-de-contrato). */
            tipo_contrato?: string;
            /**
             * @description Indicates if the worker is associated with a union.
             * @default false
             */
            sindicalizado: boolean;
            /** @description Key from the catalog [Type of Workday](#tipo-de-jornada). */
            tipo_jornada?: string;
            /** @description Key from the catalog [Type of Regime](#régimen-fiscal). */
            tipo_regimen?: string;
            /** @description Internal employee number assigned by the employer. */
            num_empleado?: string;
            /** @description Name of the department or area to which the worker belongs. */
            departamento?: string;
            /** @description Name of the position assigned to the employee or the name of the activity they perform. */
            puesto?: string;
            /** @description Key from the SAT catalog [Job Risk](#riesgo-del-puesto). */
            riesgo_puesto?: string;
            /** @description Key from the SAT catalog [Payment Periodicity](#periodicidad-del-pago). */
            periodicidad_pago?: string;
            /** @description Key from the SAT catalog "Bancos" that you can consult using our [search tool](https://dashboard.facturapi.io/catalogs/bank). */
            banco?: string;
            /** @description Bank account number (11 characters) or cell phone number (10 characters) or card number (15 or 16 characters) or CLABE (18 characters) or electronic wallet number where the payroll deposit is made.
             *      */
            cuenta_bancaria?: string;
            /** @description Amount of the cash remuneration for daily quota, bonuses, perceptions, food, housing, premiums, commissions, benefits in kind, etc. */
            salario_base_cot_apor?: number;
            /** @description Salary that is integrated with payments made in cash for daily quota, bonuses, perceptions, housing, premiums, commissions, benefits in kind, and any other amount or benefit that is delivered to the worker for their work. */
            salario_diario_integrado?: number;
            /** @description Key of the federal entity (state) where the worker provided their services to the employer, which you can consult using our [search tool](https://dashboard.facturapi.io/catalogs/state). */
            clave_ent_fed?: string;
        };
        NominaReceptorNestedProperties: {
            /** @description Array of objects to express information about the company that benefits from the employee's work, in cases where the issuer provides subcontracting services. */
            sub_contratacion?: components["schemas"]["NominaSubContratacionProperties"][];
        };
        NominaReceptorNestedInput: {
            /** @description Array of objects to express information about the company that benefits from the employee's work, in cases where the issuer provides subcontracting services. */
            sub_contratacion?: (components["schemas"]["NominaSubContratacionRequiredProperties"] & components["schemas"]["NominaSubContratacionProperties"])[];
        };
        NominaSubContratacionRequiredProperties: Record<string, never>;
        NominaSubContratacionProperties: {
            /** @description RFC of the person or company that subcontracted, that is, the person or company where the worker directly provided their services. */
            rfc_labora?: string;
            /** @description Percentage of time the worker provided their services to the person or company that subcontracted them. */
            porcentaje_tiempo?: number;
        };
        /**
         * Emisor
         * @description Information of the issuer, if required.
         */
        NominaEmisorProperties: {
            /** @description Required when the employer is a natural person. CURP of the employer. */
            curp?: string;
            /** @description Employer's registration key assigned by the social security institution to the employer. */
            registro_patronal?: string;
            /** @description RFC of the person who acted as the employer. It is used when the payment is made through a third party. */
            rfc_patron_origen?: string;
            /** @description Information for entities adhered to the National System of Fiscal Coordination to identify the origin of the resources. */
            entidad_sncf?: {
                /**
                 * @description Key of the origin of the resource.
                 *
                 *     - `“IP”`: Ingresos Propios (Own income)
                 *     - `“IF”`: Ingresos Federales (Federal income)
                 *     - `“IM”`: Ingresos mixtos (Mixed income)
                 *
                 * @enum {string}
                 */
                origen_recurso?: "IP" | "IF" | "IM";
                /** @description Amount of own resources. Required when the resource origin is mixed income.
                 *      */
                monto_recurso_propio?: number;
            };
        };
        /** Complement */
        PagoOrCustomComplementProperties: {
            /**
             * @description Type of complement
             * @enum {string}
             */
            type?: "pago" | "custom";
        };
        /** Complement */
        PagoOrCustomComplementInput: {
            /**
             * @description Type of complement
             * @enum {string}
             */
            type: "nomina" | "custom";
        };
        PagoComplementProperties: {
            type: "PagoComplementProperties";
        } & (Omit<components["schemas"]["NominaOrCustomComplementProperties"], "type"> & {
            data?: components["schemas"]["NominaComplementDataProperties"];
        });
        PagoComplementInput: Omit<components["schemas"]["PagoOrCustomComplementInput"], "type"> & {
            data?: components["schemas"]["PagoComplementDataInput"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "pago";
        };
        /**
         * PagoComplementData
         * @description Payments to include in this document. The most common is to include only one payment. A case in which more than one must be added is when the payment is made with 2 different payment methods; for example, when one part is paid by card and the other in cash.
         */
        PagoComplementDataInput: components["schemas"]["PaymentInput"][];
        /** Complement */
        NominaOrCustomComplementProperties: {
            /**
             * @description Type of complement
             * @enum {string}
             */
            type?: "nomina" | "custom";
        };
        /** Complement */
        NominaOrCustomComplementInput: {
            /**
             * @description Type of complement
             * @enum {string}
             */
            type: "nomina" | "custom";
        };
        NominaComplementProperties: Omit<components["schemas"]["NominaOrCustomComplementProperties"], "type"> & {
            data?: components["schemas"]["NominaComplementDataProperties"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "nomina";
        };
        NominaComplementInput: Omit<components["schemas"]["NominaOrCustomComplementInput"], "type"> & {
            data?: components["schemas"]["NominaComplementDataInput"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "nomina";
        };
        NamespaceRequiredProperties: Record<string, never>;
        /** Namespace */
        NamespaceProperties: {
            /**
             * @description Prefix or name of the namespace.
             * @example iedu
             */
            prefix?: string;
            /**
             * Format: url
             * @description URL associated with the namespace.
             * @example http://www.sat.gob.mx/iedu
             */
            uri?: string;
            /**
             * Format: url
             * @description URL of the XSD validation schema.
             * @example http://www.sat.gob.mx/sitio_interet/cfd/iedu/iedu.xsd
             */
            schema_location?: string;
        };
        CommonAddressProperties: {
            /**
             * @description Street name
             * @example Blvd. Atardecer
             */
            street?: string;
            /**
             * @description Exterior number.
             * @example 142
             */
            exterior?: string;
            /**
             * @description Interior number.
             * @example 4
             */
            interior?: string;
            /**
             * @description Neighborhood
             * @example Centro
             */
            neighborhood?: string;
            /**
             * @description City
             * @example Huatabampo
             */
            city?: string;
            /**
             * @description Municipality or delegation
             * @example Huatabampo
             */
            municipality?: string;
            /**
             * @description Postal code
             * @example 86500
             */
            zip?: string;
        };
        /** Webhook object */
        Webhook: components["schemas"]["ResourceAutoGeneratedProps"] & components["schemas"]["WebhookProperties"];
        WebhookSearchResult: components["schemas"]["SearchResult"] & {
            data?: components["schemas"]["Webhook"][];
        };
        WebhookProperties: {
            /** @description ID of the organization for which the webhook is being created.
             *      */
            organization?: string;
            /**
             * @description Environment in which the webhook is being created.
             * @example false
             */
            livemode?: boolean;
            /**
             * @description Events enabled for the webhook to listen to.
             * @example [
             *       "receipt.cancellation_status"
             *     ]
             */
            enabled_events?: string;
            /**
             * Format: email
             * @description Full URL of the webhook listener.
             * @example http://my-website.com/my/webhook
             */
            url?: string;
            /**
             * @description Status of the webhook.
             * @example enabled
             * @enum {string}
             */
            status?: "enabled" | "disabled";
        };
        /** Webhook */
        WebhookCreateInput: {
            /**
             * @description Full URL of the webhook listener.
             * @example http://webhook_api.com
             */
            url: string;
            /**
             * @description Events enabled for the webhook to listen to.
             * @example [
             *       "receipt.self_invoice_complete"
             *     ]
             */
            enabled_events: ("invoice.global_invoice_created" | "invoice.status_updated" | "invoice.cancellation_status_updated" | "receipt.self_invoice_complete" | "receipt.status_updated" | "receipt.cancellation_status_updated")[];
        };
        /** Webhook */
        WebhookCreateEdit: {
            /**
             * @description Status of the webhook.
             * @example disabled
             * @enum {string}
             */
            status?: "disabled" | "enabled";
            /**
             * @description Events enabled for the webhook to listen to.
             * @example [
             *       "receipt.self_invoice_complete"
             *     ]
             */
            enabled_events: ("invoice.global_invoice_created" | "invoice.status_updated" | "invoice.cancellation_status_updated" | "receipt.self_invoice_complete" | "receipt.status_updated" | "receipt.cancellation_status_updated")[];
        };
        /** Customer object */
        Customer: components["schemas"]["ResourceAutoGeneratedProps"] & components["schemas"]["CustomerProperties"];
        CustomerSearchResult: components["schemas"]["SearchResult"] & {
            data?: components["schemas"]["Customer"][];
        };
        CustomerProperties: components["schemas"]["CustomerCommonProperties"] & {
            address?: components["schemas"]["CommonAddressProperties"] & {
                /**
                 * @description If the country is Mexico ("MEX"), it contains the name of the State or Federative Entity. For foreigners, it contains the State code according to the standard [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2), which you can consult in our [State Catalog](https://dashboard.facturapi.io/catalogs/state).
                 * @example Sonora
                 */
                state?: string;
                /**
                 * @description Country code according to the standard [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3), from the [Country Catalog](https://dashboard.facturapi.io/catalogs/country).
                 * @default MEX
                 * @example MEX
                 */
                country: string;
            };
        };
        CustomerCommonProperties: {
            /**
             * @description Legal name or business name of the customer. *without* the corporate regime (e.g.: S.A. de C.V.).
             *
             * @example Dunder Mifflin
             */
            legal_name?: string;
            /**
             * @description In Mexican clients, it contains the customer's RFC. For foreigners, it is optional and represents the tax identification number, that is, the equivalent to the RFC in the customer's country.
             *
             * @example ABC101010111
             */
            tax_id?: string;
            /**
             * @description Required for national clients. Key of the customer's tax regime, from the [Tax Regime Catalog](#tax-regime).
             *
             * @example 601
             */
            tax_system?: string;
            /**
             * Format: email
             * @description Email address to which to send the generated invoices.
             * @example email@example.com
             */
            email?: string;
            /**
             * @description Customer's phone number.
             * @example 6474010101
             */
            phone?: string;
        };
        /** Customer */
        CustomerCreateInput: components["schemas"]["CustomerCommonProperties"] & {
            address: components["schemas"]["CommonAddressProperties"] & {
                /**
                 * @description If the country is Mexico ("MEX"), it contains the name of the State or Federative Entity. For foreigners, it contains the State code according to the standard [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2), which you can consult in our [State Catalog](https://dashboard.facturapi.io/catalogs/state).
                 * @example Sonora
                 */
                state?: string;
                /**
                 * @description Country code according to the standard [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3), from the [Country Catalog](https://dashboard.facturapi.io/catalogs/country).
                 * @default MEX
                 * @example MEX
                 */
                country: string;
            };
        };
        /** Product */
        LineItemProductInput: components["schemas"]["ProductProperties"];
        /** Product */
        LineItemProductEgresoInput: components["schemas"]["ProductEgresoProperties"];
        /** Product */
        LineItemTrasladoProductInput: {
            /**
             * @description Description of the good or service as it will appear on the invoice.
             * @example Ukelele
             */
            description: string;
            /**
             * @description Key from the SAT catalog of products/services. We provide a more convenient way to find it using our [key search tool](https://dashboard.facturapi.io/catalogs/productKey).
             * @example 60131324
             */
            product_key?: string;
            /**
             * @description Unit of measure key, from the SAT catalog. The default value `"H87"` (element) is the key to represent a piece or sales unit (pencil, notebook, television, etc).
             *
             *     If the unit of your product is kilograms, liters, hours, or any other unit, we provide a convenient way to find the key using our [key search tool](https://dashboard.facturapi.io/catalogs/unit).
             *
             * @default H87
             */
            unit_key: string;
            /**
             * @description Name of the unit of measure that expresses the quantity. It must be related to the unit key `unit_key`.
             *
             * @default Elemento
             */
            unit_name: string;
            /** @description Internal identifier designated by the company. It can have any value. */
            sku?: string;
        };
        LineItemProduct: {
            /**
             * @description ID of the base product. Only present if a previously saved `Product` object was used as a base.
             * @example 58e93bd8e86eb318b0197454
             */
            id?: string | null;
        } & components["schemas"]["ProductProperties"];
        Parts: {
            /** @description Description of the product or service. */
            description?: string;
            /** @description Key from the SAT catalog of products/services. We provide a more convenient way to find it using our [key search tool](https://dashboard.facturapi.io/catalogs/productKey). */
            product_key?: string;
            /**
             * @description Quantity of the product or service. It must be greater than 0.
             * @example 1
             */
            quantity?: number;
            /** @description Internal identifier designated by the company. It can have any value. */
            sku?: string;
            /** @description Unit price. This value will represent the price with or without VAT, depending on the value of `tax_included`. */
            unit_price?: number;
            /** @description Name of the unit of measure used to express the quantity. It must be related to the unit key `unit_key`. */
            unit_name?: string;
            /** @description Customs entry number (pedimento aduanal) associated with this part. */
            customs_keys?: string[];
        };
        PartInput: Record<string, never> & components["schemas"]["Parts"];
        /** Product object */
        Product: components["schemas"]["ResourceAutoGeneratedProps"] & components["schemas"]["ProductProperties"];
        ProductSearchResult: components["schemas"]["SearchResult"] & {
            data?: components["schemas"]["Product"][];
        };
        ProductProperties: {
            /**
             * @description Description of the good or service as it will appear on the invoice.
             * @example Ukelele
             */
            description: string;
            /**
             * @description Key from the SAT catalog of products/services. We provide a more convenient way to find it using our [key search tool](https://dashboard.facturapi.io/catalogs/productKey).
             * @example 60131324
             */
            product_key: string;
            /**
             * @description Price per unit of the good or service. This value will represent the price with or without VAT, depending on the value of `tax_included`.
             *
             * @example 345.6
             */
            price: number;
            /**
             * @description - `true`: Indicates that all applicable taxes are included in the price (price attribute) and will be automatically broken down when the invoice is issued.
             *     - `false`: Indicates that the price attribute does not include taxes, so those taxes to be applied will be added to the final price.
             *
             * @default true
             */
            tax_included: boolean;
            /**
             * @description Code that represents whether the good or service is subject to tax or not. This attribute corresponds to the "ObjetoImp" field in the CFDI.
             *
             *     - `01`: Not subject to tax.
             *     - `02`: Subject to tax.
             *     - `03`: Subject to tax, but not required to break down.
             *     - `04`: Subject to tax, but does not cause tax.
             *     - `05`: Subject to tax, VAT credit PODEBI.
             *
             * @default `"01"` if the `taxes` array is empty; `"02"` if the `taxes` array has at least one element.
             *
             * @enum {string|null}
             */
            taxability: "01" | "02" | "03" | "04" | "05";
            /**
             * @description List of taxes that must be applied to this product. If the parameter is omitted or null, it will be saved with an element representing the transferred IVA (VAT) of 16%, which is the most common tax. If an empty array is explicitly sent, it is understood that the product is exempt from taxes.
             *
             * @default IVA (VAT) transferred 16%
             * @example [
             *       {
             *         "type": "IVA",
             *         "rate": 0.16
             *       }
             *     ]
             */
            taxes: components["schemas"]["BaseTax"][];
            /**
             * @description Array of local taxes (state or municipal), if any.
             * @default []
             */
            local_taxes: components["schemas"]["LocalTax"][];
            /**
             * @description Key of the unit of measure, from the SAT catalog. The default value `"H87"` (element) is the key to represent a piece or sales unit (pencil, notebook, television, etc).
             *
             *     If the unit of your product is kilograms, liters, hours, or any other unit, we provide a convenient way to find the key using our [key search tool](https://dashboard.facturapi.io/catalogs/unit).
             *
             * @default H87
             */
            unit_key: string;
            /**
             * @description Name of the unit of measure used to express the quantity. It must be related to the unit key `unit_key`.
             * @default Elemento
             */
            unit_name: string;
            /** @description Internal identifier designated by the company. It can have any value. */
            sku?: string | null;
        };
        ProductEgresoProperties: {
            /**
             * @description Description of the operation in a single description. Each of the
             *     products that contemplate the discount, return, or bonus applied
             *     and that the related invoices contain must be mentioned. If the
             *     expense is based on a percentage (such as applying a 30% discount),
             *     that percentage must be included in the description along with the
             *     name of the corresponding product.
             *
             * @example Ukelele
             */
            description: string;
            /**
             * @description Key from the SAT catalog of products/services. We provide a more
             *     convenient way to find it using our [key search tool](https://dashboard.facturapi.io/catalogs/productKey).
             *
             * @default 84111506
             * @example 84111506
             */
            product_key: string;
            /**
             * @description Total amount of the quantity returned, discounted, or bonified.
             *
             * @example 345.6
             */
            price: number;
            /**
             * @description - `true`: Indicates that all applicable taxes are included in the price (price attribute) and will be automatically broken down when the invoice is issued.
             *     - `false`: Indicates that the price attribute does not include taxes, so those taxes to be applied will be added to the final price.
             *
             * @default true
             */
            tax_included: boolean;
            /**
             * @description Code that represents whether the good or service is subject to tax or not. This attribute corresponds to the "ObjetoImp" field in the CFDI.
             *
             *     - `01`: Not subject to tax.
             *     - `02`: Subject to tax.
             *     - `03`: Subject to tax, but not required to break down.
             *     - `04`: Subject to tax, but does not cause tax.
             *     - `05`: Subject to tax, VAT credit PODEBI.
             *
             * @default 02
             * @enum {string|null}
             */
            taxability: "01" | "02" | "03" | "04" | "05";
            /**
             * @description List of taxes that must be applied to this product. If the parameter is omitted or null, it will be saved with an element representing the transferred IVA (VAT) of 16%, which is the most common tax. If an empty array is explicitly sent, it is understood that the product is exempt from taxes.
             *
             * @default IVA (VAT) transferred 16%
             */
            taxes: components["schemas"]["BaseTax"][];
            /**
             * @description Array of local taxes (state or municipal), if any.
             * @default []
             */
            local_taxes: components["schemas"]["LocalTax"][];
            /**
             * @description Key of the unit of measure, from the SAT catalog. The default value `"ACT"` (activity) is the key to represent a generic activity.
             *     Check out all the available keys in our [unit search tool](https://dashboard.facturapi.io/catalogs/unit).
             *
             * @default ACT
             */
            unit_key: string;
            /**
             * @description Name of the unit of measure used to express the quantity. It must be related to the unit key `unit_key`.
             * @default Actividad
             */
            unit_name: string;
        };
        /** Payment */
        PaymentInput: {
            /**
             * @description Payment method code according to the [SAT catalog](#payment-method). You can also use the `PaymentForm` constant included in our libraries.
             * @example 03
             */
            payment_form: string;
            /** @description Array that includes an element for each related income document to this payment. The most common is that the payment is related to only one income document. A case in which more than one element is added is when a single deposit is received that covers the payment of 2 related invoices. Instead of issuing a payment receipt for each invoice, you must issue only one relating the 2 documents.
             *      */
            related_documents: {
                /**
                 * Format: uuid
                 * @description Fiscal folio or UUID of the related income document.
                 *
                 */
                uuid: string;
                /** @description Amount of the payment corresponding to the related document,
                 *     using the payment method indicated in this element of the
                 *     payment array. This value must be expressed in the currency
                 *     defined in `related_documents[].currency`.
                 *      */
                amount: number;
                /** @description Array with taxes of the related document that apply to the
                 *     payment made.
                 *      */
                taxes: {
                    /** @description Base amount used for the tax calculation.
                     *      */
                    base: number;
                    /**
                     * @description Type of tax.
                     *
                     * @enum {string}
                     */
                    type: "IVA" | "ISR" | "IEPS";
                    /**
                     * @description Rate of the tax. If the tax is a rate, this value
                     *     must be expressed as a decimal fraction percentage. If
                     *     the tax is a fixed amount, this value represents the
                     *     amount of the tax.
                     *
                     * @example 0.16
                     */
                    rate: number;
                    /**
                     * @description Factor type.
                     *
                     *     - `Tasa`: Rate
                     *     - `Cuota`: Fixed amount
                     *     - `Exento`: Exempt
                     *
                     * @default Tasa
                     * @enum {string}
                     */
                    factor: "Tasa" | "Cuota" | "Exento";
                    /**
                     * @description Indicates if the tax is a withholding (`true`) or a transfer (`false`).
                     * @default false
                     */
                    withholding: boolean;
                }[];
                /**
                 * @description Code representing whether the good or service is subject to tax or not. This attribute corresponds to the "ObjetoImp" field in the CFDI.
                 *
                 *     - `01`: Not subject to tax.
                 *     - `02`: Subject to tax.
                 *     - `03`: Subject to tax, but not required to break down.
                 *     - `04`: Subject to tax, but does not cause tax.
                 *     - `05`: Subject to tax, VAT credit PODEBI.
                 *
                 * @default "01" if the `taxes` array is empty; "02" if the `taxes` array has at least one element.
                 *
                 * @enum {string}
                 */
                taxability: "01" | "02" | "03" | "04" | "05";
                /** @description Installment number of the payment.
                 *      */
                installment: number;
                /** @description Amount that was pending before receiving this payment. This value must be expressed in the currency defined in `related_documents[].currency`.
                 *      */
                last_balance: number;
                /**
                 * @description Code of the currency used in the related document. If the currency used in the related document is not the national currency (MXN), its value must be specified according to the standard [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
                 *
                 * @default MXN
                 */
                currency: string;
                /** @description Required when the currency of the related document is different
                 *     from the payment currency. Exchange rate between the two
                 *     currencies at the time of payment. Example: The related income
                 *     invoice is registered in USD, while the current payment is made
                 *     in MXN, this attribute should be registered as `0.45` (USD/MXN).
                 *      */
                exchange?: number;
                /** @description Optional. You can include the folio number of the related document.
                 *      */
                folio_number?: number;
                /** @description Optional. You can include the series of the related document.
                 *      */
                series?: string;
            }[];
            /**
             * @description Code of the currency used in the payment. If the currency used in the payment is not the national currency (MXN), its value must be specified according to the standard [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
             *
             * @default MXN
             */
            currency: string;
            /**
             * @description Exchange rate of the currency used in the payment. It represents
             *     the number of Mexican pesos equivalent to one unit of the currency
             *     indicated in the `currency` attribute.
             *
             * @default 1
             */
            exchange: number;
            /**
             * Format: date-time
             * @description Date on which the payment was received. It is only necessary to include it if the payment was made on a date prior to the issuance of this document. Future dates are not allowed.
             * @default now
             */
            date: string;
            /** @description Number of the check, authorization, reference, SPEI tracking key, capture line, or any reference number that allows identifying the operation corresponding to the payment made.
             *      */
            numOperacion?: string;
            /** @description RFC of the entity issuing the source account, that is, the operator, bank, financial institution, issuer of electronic wallet, etc. */
            rfcEmisorCtaOrd?: string;
            /** @description Name of the ordering bank. */
            nomBancoOrdExt?: string;
            /** @description Bank account number used to make the payment. */
            ctaOrdenante?: string;
            /** @description RFC of the entity of the destination operating account, that is, the operator, bank, financial institution, issuer of electronic wallet, etc. */
            rfcEmisorCtaBen?: string;
            /** @description Bank account number where the payment was received. */
            ctaBeneficiario?: string;
            /**
             * @description Key of the type of payment chain generated by the receiving entity of the payment.
             *     If this field exists, it is mandatory to register the `certPago`, `cadPago`, and `selloPago` fields.
             *
             * @enum {string}
             */
            tipoCadPago?: 1;
            /**
             * Format: base64
             * @description Certificate that corresponds to the payment, expressed as a text string in base 64 format.
             *
             */
            certPago?: string;
            /** @description Original string (cadena original) of the payment receipt generated by the entity issuing the beneficiary account.
             *      */
            cadPago?: string;
            /**
             * Format: base64
             * @description Digital seal associated with the payment expressed as a text string in base 64 format.
             *
             */
            selloPago?: string;
        };
        /** @description Object with partial information of the customer receiving the document. To obtain the complete `Customer` object, you must consult it with the [Retrieve Customer]('#/operation/getCustomer') method.
         *      */
        CuustomerInfo: {
            /**
             * @description ID of the `customer` object related to the invoice, in case it has not been deleted.
             * @example 58e93bd8e86eb318b0197456
             */
            id?: string;
            /**
             * @description Legal name or business name of the customer. *without* the corporate regime (e.g.: S.A. de C.V.).
             *
             * @example Dunder Mifflin
             */
            legal_name?: string;
            /**
             * @description In Mexican clients, it contains the customer's RFC. For foreigners, it is optional and represents the tax identification number, that is, the equivalent to the RFC in the customer's country.
             *
             * @example ABC101010111
             */
            tax_id?: string;
            address?: {
                /**
                 * Format: ISO 3166-1 alpha-3
                 * @description Country code according to the standard [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3).
                 * @example MEX
                 */
                country?: string;
            };
        };
        RelatedDocumentInput: Record<string, never> & components["schemas"]["RelatedDocument"];
        RelatedDocument: {
            /** @description Relationship key from the SAT catalog (which you can consult in [this table](#relacion-entre-facturas)). It is required when the `related_documents` parameter is sent.
             *      */
            relationship?: string;
            /**
             * @description Fiscal folios (UUID) of related invoices.
             * @default []
             */
            documents: string[];
        };
        /** Invoice object */
        Invoice: components["schemas"]["ResourceAutoGeneratedProps"] & components["schemas"]["InvoiceProperties"];
        /** Invoice object with draft status */
        InvoiceDraft: components["schemas"]["ResourceAutoGeneratedProps"] & components["schemas"]["InvoiceDraftProperties"];
        InvoiceSearchResult: components["schemas"]["SearchResult"] & {
            data?: components["schemas"]["Invoice"][];
        };
        InvoiceRequiredProperties: Record<string, never>;
        InvoiceProperties: {
            /**
             * @description Current status of the invoice.
             *
             * @example valid
             * @enum {string}
             */
            status?: "pending" | "valid" | "canceled" | "draft";
            /**
             * @description Current status of the cancellation request, if it has been made. You can read more in the [Cancel Invoice](#operation/deleteInvoice) section.
             *
             * @example none
             * @enum {string}
             */
            cancellation_status?: "none" | "pending" | "accepted" | "rejected" | "expired";
            /**
             * Format: uri
             * @description URL to verify the status of the CFDI on the SAT portal. This link is the same as the one that appears in the QR code on the invoice PDF.
             * @example https://verificacfdi.facturaelectronica.sat.gob.mx/default.aspx?id=45BEC0CA-5F1E-491E-9417-698EA48C382A&re=AAA010101AAA&rr=ABC101010111&tt=345.600000&fe=bWApPw==
             */
            verification_url?: string;
            /**
             * Format: date-time
             * @description Date of issuance of the invoice in ISO8601 format (UTC String).
             *
             * @default now
             */
            date: string;
            address?: components["schemas"]["CommonAddressProperties"] & {
                /**
                 * @description If the country is Mexico ("MEX"), it contains the name of the State or Federative Entity. For foreigners, it contains the State code according to the standard [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2), which you can consult in our [State Catalog](https://dashboard.facturapi.io/catalogs/state).
                 * @example Sonora
                 */
                state?: string;
            };
            /**
             * @description Type of document. It can have the values `"I"`: Income, `"P"`: Payment, `"E"`: Egress, `"N"`: Payroll, `"T"`: Transfer.
             *
             * @enum {string}
             */
            type?: "I" | "E" | "P" | "N" | "T";
            customer?: components["schemas"]["CuustomerInfo"];
            /**
             * @description Total amount invoiced.
             * @example 10944.82
             */
            total?: number;
            /**
             * Format: uuid
             * @description Fiscal folio of the invoice, assigned by the SAT.
             * @example 39c85a3f-275b-4341-b259-e8971d9f8a94
             */
            uuid?: string;
            /**
             * @description Autoincremental folio number for internal control and without fiscal relevance.
             * @example 914
             */
            folio_number?: number;
            /**
             * @description Series. Alphanumeric characters designated by the company for internal control and without fiscal relevance. In the PDF, it is printed next to the folio number.
             * @example F
             */
            series?: string;
            /** @description Identifier that you can use to relate this invoice to your records to later search by this number. */
            external_id?: string;
            /** @description Unique identifier that you can use to avoid duplicates when retrying a request. It can be any text string, as long as it is unique for each document. */
            idempotency_key?: string;
            /**
             * @description Payment form code according to the [Payment Form catalog](#payment-form).
             * @example 6
             */
            payment_form?: string;
            /** @description This field is automatically assigned by Facturapi. It indicates if an invoice
             *     with status `draft` is complete and ready to be stamped. If the value is `true`, you can
             *     try to stamp the invoice with the [Stamp Invoice]('#/operation/stampInvoice') method.
             *     If the value is `false`, you must use the [Update Invoice]('#/operation/updateDraftInvoice')
             *     method to complete the missing fields.
             *
             *     In an invoice with a status other than `draft`, this field will always be `false`.
             *      */
            is_ready_to_stamp?: boolean;
            /** @description Concepts included in the document. */
            items?: components["schemas"]["LineItem"][];
            /** @description Documents related to the invoice. */
            related_documents?: components["schemas"]["RelatedDocument"][];
            /**
             * @description Currency code, according to the standard [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
             * @example MXN
             */
            currency?: string;
            /**
             * @description Exchange rate for the currency used. It represents the number of Mexican pesos (MXN) equivalent to one unit of the currency indicated in the `currency` attribute.
             * @example 1
             */
            exchange?: number;
            /**
             * @description Complements to include in the invoice.
             * @default []
             */
            complements: components["schemas"]["NominaOrCustomComplementProperties"][];
            /**
             * Format: html
             * @description In case you need to include more information in the PDF, this field allows you to insert HTML code with your own content.
             */
            pdf_custom_section?: string;
            /**
             * Format: xml
             * @description XML code with the Addenda that needs to be added to the invoice.
             */
            addenda?: string;
            /** @description Namespaces to insert in the root node of the invoice. Required for `addenda`. */
            namespaces?: components["schemas"]["NamespaceProperties"][];
            stamp?: components["schemas"]["Stamp"];
        };
        InvoiceDraftProperties: {
            /**
             * @description Current status of the invoice.
             *
             * @example draft
             * @enum {string}
             */
            status?: "pending" | "valid" | "canceled" | "draft";
            /**
             * @description Current status of the cancellation request, if it has been made. You can read more in the [Cancel Invoice](#operation/deleteInvoice) section.
             *
             * @example none
             * @enum {string}
             */
            cancellation_status?: "none" | "pending" | "accepted" | "rejected" | "expired";
            /**
             * Format: uri
             * @description URL to verify the status of the CFDI on the SAT portal. This link is the same as the one that appears in the QR code on the invoice PDF.
             * @example null
             */
            verification_url?: string;
            /**
             * Format: date-time
             * @description Date of issuance of the invoice in ISO8601 format (UTC String). If the status is `draft`, this field is null.
             *
             * @example null
             */
            date?: string;
            address?: components["schemas"]["CommonAddressProperties"] & {
                /**
                 * @description If the country is Mexico ("MEX"), it contains the name of the State or Federative Entity. For foreigners, it contains the State code according to the standard [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2), which you can consult in our [State Catalog](https://dashboard.facturapi.io/catalogs/state).
                 * @example Sonora
                 */
                state?: string;
            };
            /**
             * @description Type of document. It can have the values `"I"`: Income, `"P"`: Payment, `"E"`: Egress, `"N"`: Payroll, `"T"`: Transfer.
             *
             * @enum {string}
             */
            type?: "I" | "E" | "P" | "N" | "T";
            customer?: components["schemas"]["CuustomerInfo"];
            /**
             * @description Total amount invoiced.
             * @example 0
             */
            total?: number;
            /**
             * Format: uuid
             * @description Fiscal folio of the invoice, assigned by the SAT. If the invoice has not been stamped, this field is null.
             * @example 0
             */
            uuid?: string;
            /**
             * @description Autoincremental folio number for internal control and without fiscal relevance.
             * @example 914
             */
            folio_number?: number;
            /**
             * @description Series. Alphanumeric characters designated by the company for internal control and without fiscal relevance. In the PDF, it is printed next to the folio number.
             * @example F
             */
            series?: string;
            /** @description Identifier that you can use to relate this invoice to your records to later search by this number. */
            external_id?: string;
            /** @description Unique identifier that you can use to avoid duplicates when retrying a request. It can be any text string, as long as it is unique for each document. */
            idempotency_key?: string;
            /**
             * @description Payment form code according to the [Payment Form catalog](#forma-de-pago).
             * @example 6
             */
            payment_form?: string;
            /** @description Concepts included in the document. */
            items?: components["schemas"]["LineItem"][];
            /** @description Documents related to the invoice. */
            related_documents?: components["schemas"]["RelatedDocument"][];
            /**
             * @description Currency code, according to the standard [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
             * @example MXN
             */
            currency?: string;
            /**
             * @description Exchange rate for the currency used. It represents the number of Mexican pesos (MXN) equivalent to one unit of the currency indicated in the `currency` attribute.
             * @example 1
             */
            exchange?: number;
            /**
             * @description Complements to include in the invoice.
             * @default []
             */
            complements: components["schemas"]["NominaOrCustomComplementProperties"][];
            /**
             * Format: html
             * @description In case you need to include more information in the PDF, this field allows you to insert HTML code with your own content.
             */
            pdf_custom_section?: string;
            /**
             * Format: xml
             * @description XML code with the Addenda that needs to be added to the invoice.
             */
            addenda?: string;
            /** @description Namespaces to insert in the root node of the invoice. Required for `addenda`. */
            namespaces?: components["schemas"]["NamespaceProperties"][];
            /** @description This field is automatically assigned by Facturapi. It indicates if an invoice
             *     with status `draft` is complete and ready to be stamped. If the value is `true`, you can
             *     try to stamp the invoice with the [Stamp Invoice]('#/operation/stampInvoice') method.
             *     If the value is `false`, you must use the [Update Invoice]('#/operation/updateDraftInvoice')
             *     method to complete the missing fields.
             *
             *     In an invoice with a status other than `draft`, this field will always be `false`.
             *      */
            is_ready_to_stamp?: boolean;
            stamp?: components["schemas"]["Stamp"] & Record<string, never>;
        };
        InvoiceableCommonInput: {
            /**
             * @description Number of folio assigned by the company for internal control. If omitted, the autoincremental value of the organization will be assigned.
             *
             * @default autoincremental
             */
            folio_number: number;
            /** @description Series. Aplanumeric characters designated by the company for internal control and without fiscal relevance. */
            series?: string | null;
            /**
             * Format: xml
             * @description In case you need to include more information in the PDF, this field allows you to insert HTML code with your own content.
             *
             *     For security reasons, the code you can send is limited to the following tags: `h1`, `h2`, `h3`, `h4`, `h5`, `h6`, `div`, `p`, `span`, `small`, `br`, `b`, `i`, `ul`, `ol`, `li`, `strong`, `table`, `thead`, `tbody`, `tfoot`, `tr`, `th`, and `td`. Attributes and styles are not allowed.
             *
             */
            pdf_custom_section?: string | null;
            /**
             * Format: xml
             * @description XML code with the Addenda that needs to be added to the invoice.
             */
            addenda?: string | null;
            /**
             * @description If you included the `complements` parameter, this field is optional; however, if you included the `addenda` parameter, you must send the necessary information to include these namespaces in the XML document.
             *
             * @default []
             */
            namespaces: (components["schemas"]["NamespaceRequiredProperties"] & components["schemas"]["NamespaceProperties"])[];
            /** @description Configure which optional fields you want to show in the PDF. The SAT does not require showing these fields, but they can be activated according to the customer's preference for the current invoice. Use this field for invoice generation requests in which you need to use a different configuration than the pdf_extra field of the organization.
             *      */
            pdf_options?: {
                /**
                 * @description Show SAT catalog codes next to their descriptions. Example: "KGM Kilogramo".
                 *
                 * @default true
                 */
                codes: boolean;
                /**
                 * @description Show the product/service key.
                 *
                 * @default true
                 */
                product_key: boolean;
                /**
                 * @description Round the unit price in the PDF to 2 decimals, but keep the 6 decimals in the XML.
                 *
                 * @default false
                 */
                round_unit_price: boolean;
                /**
                 * @description Show the tax breakdown in the PDF. If disabled, only the taxes will be shown in the totals, but not in the detail of each concept.
                 *
                 * @default true
                 */
                tax_breakdown: boolean;
                /**
                 * @description Show the IEPS breakdown in the PDF. If disabled, only the taxes related to the IVA (VAT) will be shown in the subtotal.
                 *
                 * @default true
                 */
                ieps_breakdown: boolean;
            };
        };
        InvoiceableCommonEditInput: {
            /** @description Folio number assigned by the company for internal control. If omitted, the autoincremental value of the organization will be assigned. This field does not have any fiscal relevance.
             *      */
            folio_number?: number;
            /** @description Series. Alphanumeric characters designated by the company for internal control and without fiscal relevance. */
            series?: string | null;
            /**
             * Format: xml
             * @description In case you need to include more information in the PDF, this field allows you to insert HTML code with your own content.
             *
             *     For security reasons, the code you can send is limited to the following tags: `h1`, `h2`, `h3`, `h4`, `h5`, `h6`, `div`, `p`, `span`, `small`, `br`, `b`, `i`, `ul`, `ol`, `li`, `strong`, `table`, `thead`, `tbody`, `tfoot`, `tr`, `th`, and `td`. Attributes and styles are not allowed.
             *
             */
            pdf_custom_section?: string | null;
            /**
             * Format: xml
             * @description XML code with the Addendum to add to the invoice.
             */
            addenda?: string | null;
            /** @description If you included the `complements` parameter, this field is optional; however, if you included the `addenda` parameter, you must send the necessary information to include these namespaces in the XML document.
             *      */
            namespaces?: (components["schemas"]["NamespaceRequiredProperties"] & components["schemas"]["NamespaceProperties"])[];
            /** @description Configure which optional fields you want to show in the PDF. The SAT does not require showing these fields, but they can be activated according to the customer's preference for the current invoice. Use this field for invoice generation requests in which you need to use a different configuration than the pdf_extra field of the organization.
             *      */
            pdf_options?: {
                /**
                 * @description Show SAT catalog codes next to their descriptions. Example: "KGM Kilogramo".
                 *
                 * @default true
                 */
                codes: boolean;
                /**
                 * @description Show the product/service key.
                 *
                 * @default true
                 */
                product_key: boolean;
                /**
                 * @description Round the unit price in the PDF to 2 decimals, but keep the 6 decimals in the XML.
                 *
                 * @default false
                 */
                round_unit_price: boolean;
                /**
                 * @description Show the tax breakdown in the PDF. If disabled, only the taxes will be shown in the totals, but not in the detail of each concept.
                 *
                 * @default true
                 */
                tax_breakdown: boolean;
                /**
                 * @description Show the IEPS breakdown in the PDF. If disabled, only the taxes related to the IVA (VAT) will be shown in the subtotal.
                 *
                 * @default true
                 */
                ieps_breakdown: boolean;
            };
        };
        InvoiceCommonInputProperties: {
            /** @description Customer receiving the invoice. */
            customer?: components["schemas"]["CustomerCreateInput"] | string;
            /**
             * @description Initial status of the invoice.
             *
             *     If `draft` is sent, the invoice will
             *     be saved as a draft and will not be stamped or sent to the SAT.
             *     Also, when sending `draft`, all required fields become optional.
             *
             *     If omitted, the default status is `pending` and once stamped (in
             *     the response) this field will be updated to `valid`. For
             *     asynchronous invoices, this field will remain `pending` until the
             *     invoice is stamped.
             *
             * @default pending
             * @enum {string}
             */
            status: "pending" | "draft";
            /**
             * Format: date-time
             * @description Date of issuance of the invoice in ISO8601 format (UTC String). It cannot be earlier than 72 hours in the past, nor later than the present.
             *
             * @default now
             */
            date: string;
            address?: components["schemas"]["CommonAddressProperties"] & {
                /**
                 * @description If the country is Mexico ("MEX"), this field should contain the name of the State or Federative Entity. For foreigners, it should contain the State code according to the standard [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2), which you can consult in our [State Catalog](https://dashboard.facturapi.io/catalogs/state).
                 * @example Sonora
                 */
                state?: string;
            };
            /** @description Optional identifier that you can use to relate this invoice to your records and later search by this number. Facturapi does not validate that this field is unique.
             *      */
            external_id?: string | null;
            /** @description Unique identifier that you can use to avoid duplicates when retrying a request. It can be any text string, as long as it is unique for each document.
             *
             *     If left blank, it will not be taken into account.
             *      */
            idempotency_key?: string | null;
        } & components["schemas"]["InvoiceableCommonInput"];
        InvoiceCommonEditInputProperties: {
            /** @description Customer receiving the invoice. */
            customer?: components["schemas"]["CustomerCreateInput"] | string;
            /**
             * @description Initial status of the invoice. It is only possible to edit an invoice with status `draft`,
             *     and it is not possible to change the status when editing, so the only allowed value is `draft`.
             *
             * @enum {string}
             */
            status?: "draft";
            /**
             * Format: date-time
             * @description Date of issuance of the invoice in ISO8601 format (UTC String). It cannot be earlier than 72 hours in the past, nor later than the present.
             *
             */
            date?: string;
            address?: components["schemas"]["CommonAddressProperties"] & {
                /**
                 * @description If the country is Mexico ("MEX"), this field should contain the name of the State or Federative Entity. For foreigners, it should contain the State code according to the standard [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2), which you can consult in our [State Catalog](https://dashboard.facturapi.io/catalogs/state).
                 * @example Sonora
                 */
                state?: string;
            };
            /** @description Optional identifier that you can use to relate this invoice to your records and later search by this number. Facturapi does not validate that this field is unique.
             *      */
            external_id?: string | null;
            /** @description Unique identifier that you can use to avoid duplicates when retrying a request. It can be any text string, as long as it is unique for each document.
             *
             *     If left blank, it will not be taken into account.
             *      */
            idempotency_key?: string | null;
        } & components["schemas"]["InvoiceableCommonEditInput"];
        InvoiceCreateInput: unknown | unknown | unknown | unknown | unknown;
        /** Income */
        InvoiceIngresoInput: {
            /**
             * @description Type of document. The default value is `“I”` (Income).
             *
             * @default I
             * @enum {string}
             */
            type: "I";
            /** @description Concepts to include in the invoice.
             *
             *     The maximum number of elements that you can include in an invoice is 5,000. If you need
             *     to issue an invoice with more than 5,000 concepts, you can divide the transaction into several invoices.
             *      */
            items: components["schemas"]["LineItemInput"][];
            /**
             * @description Código que representa la forma de pago, de acuerdo al [catálogo del SAT](#forma-de-pago).
             * @example 03
             */
            payment_form: string;
            /**
             * @description Code of the payment method according to the SAT catalog.
             *
             *     - `PUE`: Payment in One Installment (paid in full at the time of the transaction)
             *     - `PPD`: Payment in Installments or Deferred (partial or deferred payment)
             *
             * @default PUE
             * @enum {string}
             */
            payment_method: "PUE" | "PPD";
            /**
             * @description Code of Use of CFDI according to the SAT catalog. You can see the codes in [this table](#uso-cfdi), or use the constants included in our libraries.
             *
             *     For global invoices you must use the code `S01`.
             *
             * @default G01
             */
            use: string;
            /**
             * @description Currency code, according to the standard [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
             * @default MXN
             */
            currency: string;
            /**
             * @description Exchange rate according to the currency used. It represents the
             *     number of Mexican pesos (MXN) equivalent to one unit of the
             *     currency indicated in the `currency` attribute.
             *
             * @default 1
             */
            exchange: number;
            /**
             * @description Payment conditions. Free text field usually used to specify payment terms, such as the due date.
             * @example Fecha límite de pago: 28/feb/2025
             */
            conditions?: string | null;
            /**
             * @description Documents related to the invoice.
             * @default []
             */
            related_documents: components["schemas"]["RelatedDocumentInput"][];
            /** @description Required object when creating a global invoice.
             *      */
            global?: {
                /**
                 * @description Periodicity the global invoice covers.
                 *
                 *     - `day`: Daily
                 *     - `week`: Weekly
                 *     - `fortnight`: Every half month (quincena)
                 *     - `month`: Monthly
                 *     - `two_months`: Once every two months
                 *
                 * @enum {string|null}
                 */
                periodicity: "day" | "week" | "fortnight" | "month" | "two_months" | null;
                /**
                 * @description Key representing the month or bimester of the invoice. Consult
                 *     the possible values in the [Months and Bimesters catalog](#meses-y-bimestres).
                 *
                 * @example 01
                 */
                months: string;
                /**
                 * @description Year of the invoice.
                 * @example 2022
                 */
                year: number;
            } | null;
            /**
             * @description Indicates if the invoice covers an export operation.
             *
             *     - `01`: Not applicable
             *     - `02`: Definitive with key A1
             *     - `03`: Temporary
             *     - `04`: Definitive with key different from A1 or when there is no sale in terms of the CFF
             *
             * @default 01
             * @enum {string}
             */
            export: "01" | "02" | "03" | "04";
            /**
             * @description Complements to include in the invoice. You can include any complement in the
             *     invoice if you build the XML node of the complement yourself and use the `custom` type.
             *     It is necessary to add the complement information to the PDF separately using the
             *     `pdf_custom_section` parameter.
             *
             * @default []
             */
            complements: components["schemas"]["CustomComplementInput"][];
        } & components["schemas"]["InvoiceCommonInputProperties"];
        /** Egress */
        InvoiceEgresoInput: {
            /** @enum {string} */
            type: "E";
            /**
             * @description Payment form code according to the [Payment Form catalog](#forma-de-pago).
             * @example 03
             */
            payment_form: string;
            /**
             * @description Documents related to the credit note.
             *
             * @default []
             */
            related_documents: components["schemas"]["RelatedDocumentInput"][];
            /** @description Concepts to include in the credit note.
             *
             *     The maximum number of elements that you can include in a document is 5,000. If you need
             *     to issue a document with more than 5,000 concepts, you can divide the transaction into several documents.
             *      */
            items: components["schemas"]["LineItemEgresoInput"][];
            /**
             * @description Code of Use of CFDI according to the SAT catalog. You can see the codes in [this table](#uso-cfdi), or use the constants included in our libraries.
             *
             * @default G01
             */
            use: string;
            /**
             * @description Currency code, according to the standard [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
             * @default MXN
             */
            currency: string;
            /**
             * @description Exchange rate according to the currency used. It represents the
             *     number of Mexican pesos (MXN) equivalent to one unit of the
             *     currency indicated in the `currency` attribute.
             *
             * @default 1
             */
            exchange: number;
            /**
             * @description Complements to include in the credit note. You can include any complement in the
             *     credit note if you build the XML node of the complement yourself and use the `custom` type.
             *     It is necessary to add the complement information to the PDF separately using the
             *     `pdf_custom_section` parameter.
             *
             * @default []
             */
            complements: components["schemas"]["CustomComplementInput"][];
        } & components["schemas"]["InvoiceCommonInputProperties"];
        /** Payment */
        InvoicePagoInput: {
            /** @enum {string} */
            type: "P";
            /**
             * @description Documents related to the invoice.
             * @default []
             */
            related_documents: components["schemas"]["RelatedDocumentInput"][];
            third_party?: Record<string, never> & components["schemas"]["ThirdParty"];
            /**
             * @description Complements to include in the invoice.
             * @default []
             */
            complements: components["schemas"]["PagoOrCustomComplementInput"][];
        } & components["schemas"]["InvoiceCommonInputProperties"];
        /** Payroll */
        InvoiceNominaInput: {
            /** @enum {string} */
            type: "N";
            /**
             * @description Complements to include in the invoice.
             * @default []
             */
            complements: components["schemas"]["NominaOrCustomComplementInput"][];
            /**
             * @description Documents related to the invoice.
             * @default []
             */
            related_documents: components["schemas"]["RelatedDocumentInput"][];
        } & components["schemas"]["InvoiceCommonInputProperties"];
        /** Transfer */
        InvoiceTrasladoInput: {
            /** @enum {string} */
            type: "T";
            /** @description Concepts to include in the Transfer invoice.
             *
             *     The maximum number of elements that you can include in an invoice is 5,000. If you need
             *     to issue an invoice with more than 5,000 concepts, you can divide the transaction into several invoices.
             *      */
            items: components["schemas"]["LineItemTrasladoInput"][];
            /**
             * @description Complements to include in the invoice. You can include any complement in the
             *     invoice if you build the XML node of the complement yourself and use the `custom` type.
             *     It is necessary to add the complement information to the PDF separately using the
             *     `pdf_custom_section` parameter.
             *
             * @default []
             */
            complements: components["schemas"]["CustomComplementInput"][];
            /**
             * @description Code of Use of CFDI according to the SAT catalog. You can see the codes in [this table](#uso-cfdi), or use the constants included in our libraries.
             *
             * @default G01
             */
            use: string;
            /**
             * @description Currency code, according to the standard [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
             * @default MXN
             */
            currency: string;
            /**
             * @description Exchange rate according to the currency used. It represents the
             *     number of Mexican pesos (MXN) equivalent to one unit of the
             *     currency indicated in the `currency` attribute.
             *
             * @default 1
             */
            exchange: number;
            /**
             * @description Documents related to the invoice.
             * @default []
             */
            related_documents: components["schemas"]["RelatedDocumentInput"][];
        } & components["schemas"]["InvoiceCommonInputProperties"];
        /** Income */
        InvoiceIngresoEditInput: {
            /**
             * @description Type of document. It can have the values `"I"`: Income, `"P"`: Payment, `"E"`: Egress, `"N"`: Payroll, `"T"`: Transfer.
             *
             * @enum {string}
             */
            type?: "I" | "E" | "P" | "N" | "T";
            /** @description Concepts to include in the invoice.
             *
             *     The maximum number of elements that you can include in an invoice is 5,000. If you need
             *     to issue an invoice with more than 5,000 concepts, you can divide the transaction into several invoices.
             *      */
            items?: components["schemas"]["LineItemInput"][];
            /**
             * @description Payment form code according to the [Payment Form catalog](#forma-de-pago).
             * @example 03
             */
            payment_form?: string;
            /**
             * @description Code of the payment method according to the SAT catalog.
             *
             *     - `PUE`: Payment in One Installment (paid in full at the time of the transaction)
             *     - `PPD`: Payment in Installments or Deferred (partial or deferred payment)
             *
             * @enum {string}
             */
            payment_method?: "PUE" | "PPD";
            /**
             * @description Code of Use of CFDI according to the SAT catalog. You can see the codes in [this table](#uso-cfdi), or use the constants included in our libraries.
             *
             *     For global invoices you must use the code `S01`.
             *
             * @example G01
             */
            use?: string;
            /**
             * @description Currency code, according to the standard [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
             * @example MXN
             */
            currency?: string;
            /** @description Echange rate for the currency used. It represents the number of pesos mexicanos (MXN) equivalent to one unit of the currency indicated in the `currency`.
             *      */
            exchange?: number;
            /**
             * @description Payment conditions. Free text field usually used to specify payment terms, such as the due date.
             * @example Fecha límite de pago: 28/feb/2025
             */
            conditions?: string | null;
            /** @description Documents related to the invoice. */
            related_documents?: components["schemas"]["RelatedDocumentInput"][];
            /** @description Object required when creating a global invoice.
             *      */
            global?: {
                /**
                 * @description Periodicity the global invoice covers.
                 *
                 *     - `day`: Daily
                 *     - `week`: Weekly
                 *     - `fortnight`: Every half month (quincena)
                 *     - `month`: Monthly
                 *     - `two_months`: Once every two months
                 *
                 * @enum {string|null}
                 */
                periodicity: "day" | "week" | "fortnight" | "month" | "two_months" | null;
                /**
                 * @description Key representing the month or bimester of the invoice. Consult
                 *     the possible values in the [Months and Bimesters catalog](#meses-y-bimestres).
                 *
                 * @example 01
                 */
                months: string;
                /**
                 * @description Year of the invoice.
                 * @example 2022
                 */
                year: number;
            } | null;
            /**
             * @description Indicates if the invoice covers an export operation.
             *
             *     - `01`: Not applicable
             *     - `02`: Definitive with key A1
             *     - `03`: Temporary
             *     - `04`: Definitive with key different from A1 or when there is no sale in terms of the CFF
             *
             * @enum {string}
             */
            export?: "01" | "02" | "03" | "04";
            /** @description Complements to include in the invoice. You can include any complement in the
             *     invoice if you build the XML node of the complement yourself and use the `custom` type.
             *     It is necessary to add the complement information to the PDF separately using the
             *     `pdf_custom_section` parameter.
             *      */
            complements?: components["schemas"]["CustomComplementInput"][];
        } & components["schemas"]["InvoiceCommonEditInputProperties"];
        /** Egress */
        InvoiceEgresoEditInput: {
            /**
             * @description Type of document. It can have the values `"I"`: Income, `"P"`: Payment, `"E"`: Egress, `"N"`: Payroll, `"T"`: Transfer.
             *
             * @enum {string}
             */
            type?: "I" | "E" | "P" | "N" | "T";
            /**
             * @description Payment form code according to the [Payment Form catalog](#forma-de-pago).
             * @example 03
             */
            payment_form?: string;
            /** @description Documents related to the credit note.
             *      */
            related_documents?: components["schemas"]["RelatedDocumentInput"][];
            /** @description Concepts to include in the credit note.
             *
             *     The maximum number of elements that you can include in a document is 5,000. If you need
             *     to issue a document with more than 5,000 concepts, you can divide the transaction into several documents.
             *      */
            items?: components["schemas"]["LineItemEgresoInput"][];
            /**
             * @description Code of Use of CFDI according to the SAT catalog. You can see the codes in [this table](#uso-cfdi), or use the constants included in our libraries.
             *
             * @example G01
             */
            use?: string;
            /**
             * @description Currency code, according to the standard [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
             * @example MXN
             */
            currency?: string;
            /** @description Exchange rate according to the currency used. It represents the number of pesos mexicanos (MXN) equivalent to one unit of the currency indicated in the `currency`.
             *      */
            exchange?: number;
            /** @description Complements to include in the credit note. You can include any complement in the
             *     credit note if you build the XML node of the complement yourself and use the `custom` type.
             *     It is necessary to add the complement information to the PDF separately using the
             *     `pdf_custom_section` parameter.
             *      */
            complements?: components["schemas"]["CustomComplementInput"][];
        } & components["schemas"]["InvoiceCommonInputProperties"];
        /** Payment */
        InvoicePagoEditInput: {
            /**
             * @description Type of document. It can have the values `"I"`: Income, `"P"`: Payment, `"E"`: Egress, `"N"`: Payroll, `"T"`: Transfer.
             *
             * @enum {string}
             */
            type?: "I" | "E" | "P" | "N" | "T";
            /** @description Documents related to the invoice. */
            related_documents?: components["schemas"]["RelatedDocumentInput"][];
            third_party?: Record<string, never> & components["schemas"]["ThirdParty"];
            /** @description Complements to include in the invoice. */
            complements?: components["schemas"]["PagoOrCustomComplementInput"][];
        } & components["schemas"]["InvoiceCommonEditInputProperties"];
        /** Payroll */
        InvoiceNominaEditInput: {
            /**
             * @description Type of document. It can have the values `"I"`: Income, `"P"`: Payment, `"E"`: Egress, `"N"`: Payroll, `"T"`: Transfer.
             *
             * @enum {string}
             */
            type?: "I" | "E" | "P" | "N" | "T";
            /** @description Complements to include in the invoice. */
            complements?: components["schemas"]["NominaOrCustomComplementInput"][];
            /** @description Documents related to the invoice. */
            related_documents?: components["schemas"]["RelatedDocumentInput"][];
        } & components["schemas"]["InvoiceCommonEditInputProperties"];
        /** Transfer */
        InvoiceTrasladoEditInput: {
            /**
             * @description Type of document. It can have the values `"I"`: Income, `"P"`: Payment, `"E"`: Egress, `"N"`: Payroll, `"T"`: Transfer.
             *
             * @enum {string}
             */
            type?: "I" | "E" | "P" | "N" | "T";
            /** @description Concepts to include in the Transfer invoice.
             *
             *     The maximum number of elements that you can include in an invoice is 5,000. If you need
             *     to issue an invoice with more than 5,000 concepts, you can divide the transaction into several invoices.
             *      */
            items?: components["schemas"]["LineItemTrasladoInput"][];
            /** @description Complements to include in the invoice. You can include any complement in the
             *     invoice if you build the XML node of the complement yourself and use the `custom` type.
             *     It is necessary to add the complement information to the PDF separately using the
             *     `pdf_custom_section` parameter.
             *      */
            complements?: components["schemas"]["CustomComplementInput"][];
            /**
             * @description Code of Use of CFDI according to the SAT catalog. You can see the codes in [this table](#uso-cfdi), or use the constants included in our libraries.
             *
             * @example G01
             */
            use?: string;
            /**
             * @description Currency code, according to the standard [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
             * @example MXN
             */
            currency?: string;
            /** @description Exchange rate for the currency used. It represents the number of pesos mexicanos (MXN) equivalent to one unit of the currency indicated in the `currency` attribute.
             *      */
            exchange?: number;
            /** @description Documents related to the invoice. */
            related_documents?: components["schemas"]["RelatedDocumentInput"][];
        } & components["schemas"]["InvoiceCommonEditInputProperties"];
        /** Receipt object */
        Receipt: components["schemas"]["ResourceAutoGeneratedProps"] & components["schemas"]["ReceiptProperties"];
        ReceiptProperties: {
            /**
             * Format: date-time
             * @description Date of issuance of the receipt in ISO8601 format (UTC String).
             *
             * @example 2021-09-10T15:21:23.456Z
             */
            date?: string;
            /**
             * Format: date-time
             * @description Expiration date in ISO8601 format (UTC String).
             *
             *     It is the deadline for the customer to invoice their receipt on the autofactura portal.
             *     It is calculated automatically from the organization's receipt settings.
             *
             * @example 2021-09-17T15:21:23.456Z
             */
            expires_at?: string;
            /**
             * @description Estado actual del recibo.
             * @enum {string}
             */
            status?: "open" | "canceled" | "invoiced_to_customer" | "invoiced_globally";
            /**
             * Format: url
             * @description URL to the self-invoice portal. It includes the `key` of the receipt.
             *
             *     You can use it to generate a button or a QR code for your customers to invoice their receipts.
             *
             * @example https://factura.space/empresa-demo/r9YqYarL
             */
            self_invoice_url?: string;
            /**
             * @description Total amount of the operation
             * @example 356.78
             */
            total?: number;
            /**
             * @description ID of the associated invoice, if invoiced.
             * @example 614496b471d422de4b6cfcc4
             */
            invoice?: string;
            /**
             * @description Auto-generated. Short alphanumeric unique identifier, useful for accessing the self-invoice from your microsite on factura.space.
             *
             * @example r9YqYarL
             */
            key?: string;
            /** @description Sale items included in the receipt.
             *      */
            items?: components["schemas"]["LineItem"][];
            /** @description Optional identifier that you can use to relate this receipt to your records and later search by this number. Facturapi does not validate that this field is unique.
             *      */
            external_id?: string;
            /** @description Unique identifier that you can use to avoid duplicates when retrying a request. It can be any text string, as long as it is unique for each document.
             *
             *     If left blank, it will not be taken into account.
             *      */
            idempotency_key?: string;
        } & components["schemas"]["ReceiptEditableProperties"];
        ReceiptInput: {
            /** @description Concepts to include in the receipt.
             *
             *     The maximum number of elements that you can include in a receipt is 5,000. If you need
             *     to issue a receipt with more than 5,000 concepts, you can divide the transaction into several receipts.
             *      */
            items: components["schemas"]["LineItemInput"][];
        } & components["schemas"]["ReceiptEditableProperties"] & {
            /** @description Unique identifier that you can use to avoid duplicates when retrying a request. It can be any text string, as long as it is unique for each document.
             *
             *     If left blank, it will not be taken into account.
             *      */
            idempotency_key?: string | null;
        };
        ReceiptEditableProperties: {
            /**
             * Format: date-time
             * @description Date of issuance of the receipt in ISO8601 format (UTC String).
             *
             * @example 2021-09-10T15:21:23.456Z
             */
            date?: string;
            /**
             * @description Payment form code according to the [Payment Form catalog](#forma-de-pago).
             * @example 03
             */
            payment_form?: string;
            /**
             * @description Autoincremental. Number of the receipt for internal control and without fiscal relevance.
             *
             * @example 120
             */
            folio_number?: number;
            /**
             * @description Currency code, according to the standard [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
             * @example MXN
             */
            currency?: string;
            /**
             * @description Exchange rate according to the currency used. It represents the number of Mexican pesos (MXN) equivalent to one unit of the currency indicated in the `currency` attribute.
             *
             * @example 1
             */
            exchange?: number;
            /** @description Name of the branch where the receipt was issued. */
            branch?: string;
            /** @description Optional identifier that you can use to relate this receipt to your records and later search by this number. Facturapi does not validate that this field is unique.
             *      */
            external_id?: string | null;
        };
        ReceiptSearchResult: components["schemas"]["SearchResult"] & {
            data?: components["schemas"]["Receipt"][];
        };
        InvoiceReceiptInput: {
            /** @description Customer receiving the invoice. You can send the customer object directly or the ID of a previously registered customer in Facturapi.
             *      */
            customer: components["schemas"]["CustomerCreateInput"] | string;
            /**
             * @description Code of Use of CFDI according to the SAT catalog. You can see the codes in [this table](#uso-cfdi), or use the constants included in our libraries.
             *
             * @default G01
             */
            use: string;
            /** @description Payment conditions. Free text field usually used to specify payment terms, such as the due date. */
            conditions?: string | null;
        } & components["schemas"]["InvoiceableCommonInput"];
        GlobalInvoiceInput: {
            /**
             * Format: date
             * @description Initial date of the receipts that will be included in the global invoice.
             *     By default, this value is the start of the last period (day, week,
             *     fortnight, or month), according to the value of "Periodicity" (`periodicity`)
             *     in the receipts configuration of your organization. This value is required when the `receipts` field is sent.
             *
             * @default Start of the last period
             * @example 2022-01-01T00:00:00.000
             */
            from: string;
            /**
             * Format: date
             * @description End date of the receipts that will be included in the global invoice.
             *     By default, this value is the end of the last period (day, week,
             *     fortnight, or month), according to the value of "Periodicity" (`periodicity`)
             *     in the receipts configuration of your organization. This value is required when the `receipts` field is sent.
             *
             * @default End of the last period
             * @example 2022-31-01T23:59:59.999
             */
            to: string;
            /**
             * @description Periodicity that corresponds to the range of dates used.
             *     If omitted, the organization's receipt configuration will be used.
             *     If you omit sending the `from` and `to` fields, the default dates will depend on the value of `periodicity`.
             *
             * @default `periodicity` property from the organization's receipt configuration.
             * @enum {string}
             */
            periodicity: "day" | "week" | "fortnight" | "month" | "two_months";
            /**
             * @description Key representing the month or bimester of the invoice. Consult
             *     the possible values in the [Months and Bimesters catalog](#meses-y-bimestres).
             *
             * @default Month contained in the range of dates used.
             * @example 01
             */
            months: string;
            /**
             * @description Number of the folio assigned by the company for internal control.
             *     If omitted, the incremental value of the organization will be assigned.
             *
             * @default autoincremental
             */
            folio_number: number;
            /**
             * @description Series. Alphanumeric characters designated by the company for internal control and without fiscal validity.
             * @example F
             */
            series?: string | null;
            /**
             * Format: date
             * @description Date of issuance of the invoice. By default, it takes the value of the `to` field.
             *
             * @default Value of the `to` field
             * @example 2022-01-01T00:00:00.000
             */
            date: string;
            /**
             * @description Payment form code according to the [Payment Form catalog](#forma-de-pago).
             *
             *     If included, the receipts will be grouped and the global invoice will be created by the payment form.
             *
             * @example 02
             */
            payment_form?: string;
            /** @description Receipts to include in the global invoice. If this parameter is included, the `from` and `to` parameters will be required and must comply with the `periodicity` field.
             *      */
            receipts?: string[];
        };
        /** Retention object */
        Retention: components["schemas"]["ResourceAutoGeneratedProps"] & components["schemas"]["RetentionReadOnlyProperties"] & components["schemas"]["RetentionProperties"];
        RetentionReadOnlyProperties: {
            /**
             * @description Current status of the document.
             *
             * @example valid
             * @enum {string}
             */
            status?: "valid" | "canceled";
            /**
             * Format: uri
             * @description URL to verify the status of the retention on the SAT portal. This link is the same as the one that appears in the QR code on the retention PDF.
             * @example https://verificacfdi.facturaelectronica.sat.gob.mx/default.aspx?id=45BEC0CA-5F1E-491E-9417-698EA48C382A&re=AAA010101AAA&rr=ABC101010111&tt=345.600000&fe=bWApPw==
             */
            verification_url?: string;
            /**
             * @description Type of document.
             * @example Retención
             * @enum {string}
             */
            type?: "Retención";
            /**
             * Format: uuid
             * @description Fiscal folio of the retention, assigned by the SAT.
             *
             * @example 39c85a3f-275b-4341-b259-e8971d9f8a94
             */
            uuid?: string;
            stamp?: components["schemas"]["Stamp"];
            customer?: components["schemas"]["CuustomerInfo"];
        };
        RetentionProperties: {
            /**
             * @description Key of the retention or payment information according to the SAT catalog.
             *
             * @example 1
             */
            cve_retenc?: string;
            /**
             * Format: date-time
             * @description Date of issuance of the document in ISO8601 format (UTC String).
             * @example 2021-09-15T06:03:23.000Z
             */
            fecha_exp?: string;
            /** @description If the retention key is "25" (Other types of retentions), this field is used to register the description of the retention.
             *      */
            desc_retenc?: string;
            /** @description Alphanumeric identifier for internal control of the company and without fiscal relevance. */
            folio_int?: string;
            /** @description Information about the retention period. */
            periodo?: {
                /** @description Initial month of the retention period. */
                mes_ini?: number;
                /** @description Final month of the retention period. */
                mes_fin?: number;
                /** @description Fiscal year in which the retention was made. */
                ejerc?: number;
            };
            /** @description Information about the total of retentions made in the corresponding period. */
            totales?: {
                /** @description Total amount of the operation, with precision of up to 6 decimals. */
                monto_tot_operacion?: number;
                /** @description Total amount taxed. */
                monto_tot_grav?: number;
                /** @description Total amount exempt. */
                monto_tot_exent?: number;
                /** @description Sum of the amounts of taxes withheld. */
                monto_tot_ret?: number;
                /** @description Collection of withheld taxes. */
                imp_retenidos?: {
                    /** @description Base amount on which the tax was calculated. */
                    base?: number;
                    /**
                     * @description Key of the type of tax withheld, from the SAT catalog.
                     *
                     *     - `IVA`: Value Added Tax
                     *     - `ISR`: Income Tax
                     *
                     * @example IVA
                     * @enum {string}
                     */
                    impuesto?: "IVA" | "ISR";
                    /** @description Amount of the tax withheld. */
                    monto?: number;
                    /**
                     * @description Key of the type of payment according to the SAT catalog.
                     *
                     *     - `01`: Definitive IVA (VAT) payment
                     *     - `02`: Definitive IEPS payment
                     *     - `03`: Definitive ISR Platforms payment
                     *     - `04`: Provisional ISR payment
                     *
                     * @enum {string}
                     */
                    tipo_pago_ret?: 1 | 2 | 3 | 4;
                }[];
            };
            /** @description Optional identifier that you can use to relate this retention to your records and later search by this number. Facturapi does not validate that this field is unique.
             *      */
            external_id?: string;
            /** @description Unique identifier that you can use to avoid duplicates when retrying a request. It can be any text string, as long as it is unique for each document.
             *
             *     If left blank, it will not be taken into account.
             *      */
            idempotency_key?: string | null;
            /**
             * @description Array of complements to include in the retention. Each element contains a `string` with the XML code of the complement.
             *
             * @default []
             */
            complements: components["schemas"]["CustomComplementData"][];
            /**
             * Format: html
             * @description In case you need to include more information in the PDF, this field allows you to insert HTML code with your own content.
             *
             */
            pdf_custom_section?: string;
            /**
             * Format: xml
             * @description XML code with the Addenda that needs to be added to the invoice.
             */
            addenda?: string;
            /** @description Namespaces to insert in the root node of the invoice. Required for `addenda`. */
            namespaces?: components["schemas"]["NamespaceProperties"][];
        };
        RetentionSearchResult: components["schemas"]["SearchResult"] & {
            data?: components["schemas"]["Retention"][];
        };
        RetentionInput: {
            /** @description Customer receiving the invoice. */
            customer: components["schemas"]["CustomerCreateInput"] | string;
            /**
             * @description Key of the retention or payment information according to the [SAT catalog](#clave-de-retencion).
             * @example 26
             */
            cve_retenc: string;
            /**
             * Format: date-time
             * @description Date of issuance of the document in ISO8601 format (UTC String).
             * @example 2021-09-15T06:03:23.000Z
             */
            fecha_exp?: string;
            /** @description If the retention key is "25" (Other types of retentions), this field is used to register the description of the retention.
             *      */
            desc_retenc?: string;
            /**
             * @description Alphanumeric identifier for internal control of the company and without fiscal relevance.
             * @example R123
             */
            folio_int?: string;
            /** @description Information about the retention period. */
            periodo: {
                /**
                 * @description Initial month of the retention period.
                 * @example 9
                 */
                mes_ini: number;
                /**
                 * @description Final month of the retention period.
                 * @example 9
                 */
                mes_fin: number;
                /**
                 * @description Fiscal year in which the retention was made.
                 * @example 2021
                 */
                ejerc: number;
            };
            /** @description Information about the total of retentions made in the corresponding period. */
            totales: {
                /** @description Total amount of the operation, with precision of up to 6 decimals. */
                monto_tot_operacion: number;
                /** @description Total amount taxed. */
                monto_tot_grav?: number;
                /** @description Total amount exempt. */
                monto_tot_exent: number;
                /** @description Sum of the amounts of taxes withheld. */
                monto_tot_ret?: number;
                /** @description Collection of withheld taxes. */
                imp_retenidos: {
                    /** @description Base amount on which the tax was calculated. */
                    base_ret?: number;
                    /**
                     * @description Key of the type of tax withheld, from the SAT catalog.
                     *
                     *     - `IVA`: Value Added Tax
                     *     - `ISR`: Income Tax
                     *
                     * @example IVA
                     * @enum {string}
                     */
                    impuesto?: "IVA" | "ISR";
                    /** @description Amount of the tax withheld. */
                    monto_ret: number;
                    /**
                     * @description Key of the type of payment according to the SAT catalog.
                     *
                     *     - `01`: Definitive IVA (VAT) payment
                     *     - `02`: Definitive IEPS payment
                     *     - `03`: Definitive ISR Platforms payment
                     *     - `04`: Provisional ISR payment
                     *
                     * @enum {string}
                     */
                    tipo_pago_ret: 1 | 2 | 3 | 4;
                }[];
            };
            /** @description Optional identifier that you can use to relate this retention to your records and later search by this number. Facturapi does not validate that this field is unique.
             *      */
            external_id?: string;
            /** @description Unique identifier that you can use to avoid duplicates when retrying a request. It can be any text string, as long as it is unique for each document.
             *      */
            idempotency_key?: string;
            /**
             * @description Array of complements to include in the retention. Each element contains a `string` with the XML code of the complement, as you want it to be inserted in the XML of the CFDI. Only one root XML node is allowed per element.
             *
             * @default []
             */
            complements: components["schemas"]["CustomComplementData"][];
            /**
             * Format: html
             * @description In case you need to include more information in the PDF, this field allows you to insert HTML code with your own content.
             *
             */
            pdf_custom_section?: string;
            /**
             * Format: xml
             * @description XML code with the Addenda that needs to be added to the invoice.
             */
            addenda?: string;
            /** @description Namespaces to insert in the root node of the invoice. Required for `addenda`. */
            namespaces?: (components["schemas"]["NamespaceRequiredProperties"] & components["schemas"]["NamespaceProperties"])[];
        };
        OrganizationAddress: components["schemas"]["CommonAddressProperties"] & {
            /**
             * @description Name of the State or Federative Entity.
             * @example Sonora
             */
            state?: string;
        };
        OrganizationSearchResult: components["schemas"]["SearchResult"] & {
            data?: components["schemas"]["Organization"][];
        };
        /** Organization object */
        Organization: {
            /**
             * @description ID of the organization, assigned by Facturapi.
             * @example 5a2a307be93a2f00129ea035
             */
            id?: string;
            /**
             * Format: date-time
             * @description Date and time of creation of the organization.
             * @example 2017-05-05T20:55:33.468Z
             */
            created_at?: string;
            /** @description Indicates if the organization has the necessary information to issue invoices in the Live environment. */
            is_production_ready?: boolean;
            /** @description List of steps that need to be completed for this organization to issue valid invoices in the Live environment. */
            pending_steps?: {
                /**
                 * @description Code that represents the type of step that needs to be completed.
                 *
                 * @enum {string}
                 */
                type?: "legal" | "logo" | "certificate";
                /** @description Text that describes the step that needs to be completed and that you can use to show it to the user. */
                description?: string;
            }[];
            /** @description Fiscal information of the organization. */
            legal?: {
                /** @description Commercial name of the organization. */
                name?: string;
                /** @description Fiscal or Legal Name of the organization, *without* the corporate regime (e.g.: S.A. de C.V.).
                 *      */
                legal_name?: string;
                /**
                 * @description Fiscal Regime Code, from the [SAT catalog](#régimen-fiscal).
                 * @example 601
                 */
                tax_system?: string;
                /** @description Website of the organization, which will be referenced when sending the invoice by email. */
                website?: string;
                /** @description Phone number of the organization, which will appear in the invoice PDF. */
                phone?: string;
                address?: Record<string, never> & components["schemas"]["OrganizationAddress"];
            };
            /** @description Organization customization settings, which will be used to reflect the branding and PDF preferences of the organization. This data can be updated at any time.
             *      */
            customization?: {
                /** @description Indicates if the organization already has a logo uploaded. */
                has_logo?: boolean;
                /**
                 * Format: hex
                 * @description Distinctive color of the brand in Hexadecimal RGB representation of 6 characters.
                 *
                 * @example BADA55
                 */
                color?: string;
                /**
                 * @description Folio number that will be assigned to the next invoice in the Live environment (and that will be automatically incremented for each new invoice).
                 * @example 123
                 */
                next_folio_number?: number;
                /**
                 * @description Folio number that will be assigned to the next invoice in the Test environment (and that will be automatically incremented for each new invoice).
                 *
                 * @example 123
                 */
                next_folio_number_test?: number;
                /** @description Configure which optional fields you want to show in the PDF. The SAT does not require these fields to be shown, but they can be activated according to the organization's preference.
                 *      */
                pdf_extra?: {
                    /**
                     * @description Show SAT catalog codes next to their descriptions. Example: "KGM Kilogramo".
                     *
                     * @default true
                     */
                    codes: boolean;
                    /**
                     * @description Show the product-service key.
                     *
                     * @default true
                     */
                    product_key: boolean;
                    /**
                     * @description Round the unit price in the PDF to 2 decimals, but keep the 6 decimals in the XML.
                     *
                     * @default false
                     */
                    round_unit_price: boolean;
                    /**
                     * @description Show the tax breakdown in the PDF. If disabled, only the taxes will be shown in the totals, but not in the detail of each concept.
                     *
                     * @default true
                     */
                    tax_breakdown: boolean;
                    /**
                     * @description Show the breakdown of IEPS in the PDF. If disabled, only the taxes related to IVA (VAT) will be shown in the subtotal.
                     *
                     * @default true
                     */
                    ieps_breakdown: boolean;
                };
            };
            /** @description Useful information about the organization's Digital Stamp Certificate (CSD), which will be used to sign the invoices.
             *      */
            certificate?: {
                /** @description Indicates if the organization already has the Digital Stamp Certificate (CSD) uploaded. */
                has_certificates?: boolean;
                /**
                 * Format: date-time
                 * @description Date of the last update of the certificate.
                 * @example 2023-05-05T20:55:33.468Z
                 */
                updated_at?: string;
                /**
                 * Format: date-time
                 * @description Expiration date of the certificate.
                 * @example 2025-05-05T20:55:33.468Z
                 */
                expires_at?: string;
            };
        };
        OrganizationDeleteCerts: {
            /**
             * Format: date-time
             * @description Date of deletion of the CSD certificate.
             */
            updated_at?: string;
        };
        OrganizationCreateInput: {
            /** @description Commercial name of the organization. */
            name: string;
        };
        OrganizationLegalInput: {
            /** @description Commercial name of the organization. */
            name: string;
            /** @description Fiscal or Legal Name of the organization, *without* the corporate regime (e.g.: S.A. de C.V.).
             *      */
            legal_name: string;
            /**
             * @description Fiscal Regime Code, from the [SAT catalog](#régimen-fiscal).
             * @example 601
             */
            tax_system: string;
            /** @description Website of the organization, which will be referenced when sending the invoice by email. */
            website?: string;
            /** @description Email address for clarifications. It will appear in the invoice PDF and emails.
             *      */
            support_email?: string;
            /** @description Phone number of the organization, which will appear in the invoice PDF and emails. */
            phone?: string;
            address: Record<string, never> & components["schemas"]["OrganizationAddress"];
        };
        OrganizationCertsInput: {
            /**
             * Format: binary
             * @description Binary content of the file with extension `.cer` of the CSD certificate.
             */
            cerFile: string;
            /**
             * Format: binary
             * @description Binary content of the file with extension `.key` of the CSD certificate.
             */
            keyFile: string;
            /** @description Password of the certificate key. */
            password: string;
        };
        OrganizationLogoInput: {
            /**
             * Format: binary
             * @description Binary content of the file with the image to be used as a logo.
             *
             *     Supported formats:
             *
             *     - jpg
             *     - png
             *     - svg
             *
             */
            file: string;
        };
        OrganizationCustomizationInput: {
            /**
             * Format: hex
             * @description Distinctive color of the brand in Hexadecimal RGB representation of 6 characters.
             *
             * @example BADA55
             */
            color?: string;
            /**
             * @description Folio number that will be assigned to the next invoice created in this organization in the Live environment. It will be automatically incremented for each new invoice.
             * @example 123
             */
            next_folio_number?: number;
            /**
             * @description Folio number that will be assigned to the next invoice created in this organization in the Test environment. It will be automatically incremented for each new invoice.
             *
             * @example 123
             */
            next_folio_number_test?: number;
            /** @description Configure which optional fields you want to show in the PDF. The SAT does not require these fields to be shown, but they can be activated according to the organization's preference.
             *      */
            pdf_extra?: {
                /**
                 * @description Show SAT catalog codes next to their descriptions. Example: "KGM Kilogramo".
                 *
                 * @default true
                 */
                codes: boolean;
                /**
                 * @description Show the product-service key.
                 *
                 * @default true
                 */
                product_key: boolean;
                /**
                 * @description Round the unit price in the PDF to 2 decimals, but keep the 6 decimals in the XML.
                 *
                 * @default false
                 */
                round_unit_price: boolean;
                /**
                 * @description Show the tax breakdown in the PDF. If disabled, only the taxes will be shown in the totals, but not in the detail of each concept.
                 *
                 * @default true
                 */
                tax_breakdown: boolean;
                /**
                 * @description Show the breakdown of IEPS in the PDF. If disabled, only the taxes related to IVA (VAT) will be shown in the subtotal.
                 *
                 * @default true
                 */
                ieps_breakdown: boolean;
            };
        };
        OrganizationReceiptsInput: {
            /**
             * @description Periodicity with which the company decides to issue a global invoice
             *     (to the general public) for all the receipts not invoiced. This value is used as the default when creating a global invoice.
             *
             * @default month
             * @enum {string}
             */
            periodicity: "day" | "week" | "fortnight" | "month" | "two_months";
            /**
             * @description Maximum number of days to invoice through the self-invoicing portal
             *     after the receipt is issued and before the last day of the period
             *     defined by the `periodicity` attribute. The value `0` deactivates this
             *     option, making the receipts always expire on the last day of the period.
             *
             * @default 7
             */
            duration_days: number;
            /** @description Folio number that will be assigned to the next receipt created in this organization in the Live environment. */
            next_folio_number?: number;
            /** @description Folio number that will be assigned to the next receipt created in this organization in the Test environment.
             *      */
            next_folio_number_test?: number;
        };
        /** @description Domain name. Alphanumeric characters are allowed, only lowercase,
         *     hyphen (-) and underscore (_). It must start with a letter and
         *     end in a letter or number.
         *      */
        DomainField: string;
        OrganizationDomainInput: {
            domain: components["schemas"]["DomainField"];
        };
    };
    responses: {
        /** @description Error in some of the request parameters */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["GenericError"];
            };
        };
        /** @description Authentication error */
        Unauthenticated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["GenericError"];
            };
        };
        /** @description Conflict in the request. The operation that is being attempted cannot be completed due to conflicts in the current state of the resource.
         *      */
        Conflict: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["GenericError"];
            };
        };
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["GenericError"];
            };
        };
        /** @description Unexpected error */
        UnexpectedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["GenericError"];
            };
        };
    };
    parameters: {
        /** @description Object with requested date range. */
        SearchDate: components["schemas"]["DateRange"];
        /** @description Page of results to return, starting from page 1. */
        SearchPage: number;
        /** @description Number from 1 to 100 representing the maximum amount of results to return for pagination purposes. */
        SearchLimit: number;
    };
    requestBodies: {
        CustomerCreate: {
            content: {
                "application/json": components["schemas"]["CustomerCreateInput"];
            };
        };
        CustomerEdit: {
            content: {
                "application/json": components["schemas"]["CustomerProperties"];
            };
        };
        ProductCreate: {
            content: {
                "application/json": components["schemas"]["ProductProperties"];
            };
        };
        ProductEdit: {
            content: {
                "application/json": components["schemas"]["ProductProperties"];
            };
        };
        InvoiceCreate: {
            content: {
                "application/json": components["schemas"]["InvoiceCreateInput"];
            };
        };
        InvoiceCreatePending: {
            content: {
                "application/json": components["schemas"]["InvoiceIngresoInput"] | components["schemas"]["InvoiceEgresoInput"] | components["schemas"]["InvoicePagoInput"] | components["schemas"]["InvoiceNominaInput"] | components["schemas"]["InvoiceTrasladoInput"];
            };
        };
        InvoiceEdit: {
            content: {
                "application/json": components["schemas"]["InvoiceIngresoEditInput"] | components["schemas"]["InvoiceEgresoEditInput"] | components["schemas"]["InvoicePagoEditInput"] | components["schemas"]["InvoiceNominaEditInput"] | components["schemas"]["InvoiceTrasladoEditInput"];
            };
        };
        ReceiptCreate: {
            content: {
                "application/json": components["schemas"]["ReceiptInput"];
            };
        };
        ReceiptInvoice: {
            content: {
                "application/json": components["schemas"]["InvoiceReceiptInput"];
            };
        };
        ReceiptCreateGlobalInvoice: {
            content: {
                "application/json": components["schemas"]["GlobalInvoiceInput"];
            };
        };
        RetentionCreate: {
            content: {
                "application/json": components["schemas"]["RetentionInput"];
            };
        };
        OrganizationCreate: {
            content: {
                "application/json": components["schemas"]["OrganizationCreateInput"];
            };
        };
        OrganizationEditLegal: {
            content: {
                "application/json": components["schemas"]["OrganizationLegalInput"];
            };
        };
        OrganizationUploadCerts: {
            content: {
                "multipart/form-data": components["schemas"]["OrganizationCertsInput"];
            };
        };
        OrganizationUploadLogo: {
            content: {
                "multipart/form-data": components["schemas"]["OrganizationLogoInput"];
            };
        };
        OrganizationEditCustomization: {
            content: {
                "application/json": components["schemas"]["OrganizationCustomizationInput"];
            };
        };
        OrganizationEditReceiptsSettings: {
            content: {
                "application/json": components["schemas"]["OrganizationReceiptsInput"];
            };
        };
        OrganizationEditDomain: {
            content: {
                "application/json": components["schemas"]["OrganizationDomainInput"];
            };
        };
        WebhookCreate: {
            content: {
                "application/json": components["schemas"]["WebhookCreateInput"];
            };
        };
        WebhookEdit: {
            content: {
                "application/json": components["schemas"]["WebhookCreateEdit"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listCustomers: {
        parameters: {
            query?: {
                /** @description Free text field. Search word matches with `legal_name` or `tax_id` fields. */
                q?: string;
                /** @description Object with requested date range. */
                date?: components["parameters"]["SearchDate"];
                /** @description Page of results to return, starting from page 1. */
                page?: components["parameters"]["SearchPage"];
                /** @description Number from 1 to 100 representing the maximum amount of results to return for pagination purposes. */
                limit?: components["parameters"]["SearchLimit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerSearchResult"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    createCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["CustomerCreate"];
        responses: {
            /** @description A previously-registered `Customer` object with the same information. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            /** @description New `Customer` object just created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    getCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Customer ID */
                customer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description `Customer` object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    editCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the object to edit */
                customer_id: string;
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["CustomerEdit"];
        responses: {
            /** @description `Customer` object edited successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    deleteCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the object to delete */
                customer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description `Customer` object deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    validateCustomerTaxInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the customer */
                customer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Validation result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Indicates if the customer's fiscal information matches the SAT records
                         * @example true
                         */
                        is_valid?: boolean;
                        /** @description List of errors found in the validation */
                        errors?: {
                            /**
                             * @description Path to the field with the error
                             * @example tax_system
                             */
                            path?: string;
                            /**
                             * @description Error message
                             * @example El RégimenFiscal no coincide con el registrado para el RFC en la lista de contribuyentes obligados del SAT.
                             */
                            message?: string;
                        }[];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    listProducts: {
        parameters: {
            query?: {
                /** @description Free text field. Search word matches with `description` or `sku` fields. */
                q?: string;
                /** @description Page of results to return, starting from page 1. */
                page?: components["parameters"]["SearchPage"];
                /** @description Number from 1 to 100 representing the maximum amount of results to return for pagination purposes. */
                limit?: components["parameters"]["SearchLimit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductSearchResult"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    createProduct: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["ProductCreate"];
        responses: {
            /** @description New `Product` object just created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    getProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID */
                product_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description `Product` object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    editProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID */
                product_id: string;
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["ProductEdit"];
        responses: {
            /** @description `Product` object edited successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    deleteProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product ID to delete */
                product_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description `Product` object deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    listInvoices: {
        parameters: {
            query?: {
                /** @description Text to search in the invoice.
                 *
                 *     The search will be performed by **partial** matches in the fields:
                 *
                 *     - `items[].product.description`
                 *     - `customer.legal_name`
                 *
                 *     And by **exact** matches in the fields:
                 *
                 *     - `id`
                 *     - `uuid`
                 *     - `customer.tax_id`
                 *     - `folio_number`
                 *     - `total`
                 *      */
                q?: string;
                /** @description Filter by customer ID. Exact match. */
                customer?: string;
                /** @description Filter by invoice type. Exact match. */
                type?: "I" | "E" | "P" | "N" | "T";
                /** @description Payment method. Exact match. */
                payment_method?: "PUE" | "PPD";
                /** @description Object with requested date range. */
                date?: components["parameters"]["SearchDate"];
                /** @description Page of results to return, starting from page 1. */
                page?: components["parameters"]["SearchPage"];
                /** @description Number from 1 to 100 representing the maximum amount of results to return for pagination purposes. */
                limit?: components["parameters"]["SearchLimit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoiceSearchResult"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    createInvoice: {
        parameters: {
            query?: {
                /** @description Useful for large invoices. If sent `false` or not sent, the call will wait for the SAT to respond by stamping the invoice.
                 *     If sent `true`, the call will return immediately with the `invoice` object in status `pending`, and its status can be checked
                 *     for a change to `valid` at a later time.
                 *      */
                async?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["InvoiceCreate"];
        responses: {
            /** @description `Invoice` object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    getInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the invoice */
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description `Invoice` object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    updateDraftInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the invoice to edit */
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["InvoiceEdit"];
        responses: {
            /** @description `Invoice` object edited successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoiceDraft"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    cancelInvoice: {
        parameters: {
            query: {
                /** @description Key representing the motive for the cancellation of the invoice.
                 *
                 *     Possible values:
                 *
                 *     - `01`: **Invoice issued with errors with relation**. When the invoice contains any errors in quantities, keys, or any other data and the replacement invoice has already been issued, which should be indicated through the `substitution` attribute.
                 *     - `02`: **Invoice issued with errors without relation**. When the invoice contains any errors in quantities, keys, or any other data and it is not required to be related to another invoice.
                 *     - `03`: **Operation not carried out**. When the sale or transaction was not completed.
                 *     - `04`: **Nominative operation related to the global invoice**. When it is necessary to cancel an invoice to the general public because the customer requests their invoice.
                 *      */
                motive: "01" | "02" | "03" | "04";
                /** @description ID of the invoice that replaces the invoice being canceled.
                 *
                 *     You can use either the ID assigned by Facturapi or the fiscal folio (UUID).
                 *      */
                substitution?: string;
            };
            header?: never;
            path: {
                /** @description ID of the invoice to cancel */
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description `Invoice` object after cancellation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    copyToDraftInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the invoice to copy */
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description `Invoice` draft object created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoiceDraft"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    stampDraftInvoice: {
        parameters: {
            query?: {
                /** @description Useful for large invoices. If sent `false` or not sent, the call will wait for the SAT to respond by stamping the invoice.
                 *     If sent `true`, the call will return immediately with the `invoice` object in status `pending`, and its status can be checked
                 *     for a change to `valid` at a later time.
                 *      */
                async?: boolean;
            };
            header?: never;
            path: {
                /** @description ID of the invoice to stamp */
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description `Invoice` object stamped successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    downloadCancellationReceiptXml: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the invoice to download the cancellation receipt */
                invoice_id: string;
                /** @description Format of the file to download */
                format: "xml" | "pdf";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Cancellation receipt file */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    downloadInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the invoice to download */
                invoice_id: string;
                /** @description Format of the file to download */
                format: "xml" | "pdf" | "zip";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Official CFDI file in the specified format */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    sendInvoiceByEmail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the invoice to send */
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Email address to send the invoice. If not sent, the email registered by the customer will be used.
                     *      */
                    email?: string | string[];
                };
            };
        };
        responses: {
            /** @description Email sent successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description `true` if the email was sent successfully, `false` otherwise.
                         *      */
                        ok: boolean;
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    updateInvoiceStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the invoice to update */
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description `Invoice` object updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    listReceipts: {
        parameters: {
            query?: {
                /** @description Search. Text to search in the description of the receipt's items or the SKU.
                 *      */
                q?: string;
                /**
                 * @description Code representing the payment form, according to the [SAT catalog](#forma-de-pago). If included, the receipts will be grouped and listed according to the payment form.
                 *
                 * @example 02
                 */
                payment_form?: string;
                /** @description Object with requested date range. */
                date?: components["parameters"]["SearchDate"];
                /** @description Page of results to return, starting from page 1. */
                page?: components["parameters"]["SearchPage"];
                /** @description Number from 1 to 100 representing the maximum amount of results to return for pagination purposes. */
                limit?: components["parameters"]["SearchLimit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceiptSearchResult"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    createReceipt: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["ReceiptCreate"];
        responses: {
            /** @description New `Receipt` object created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Receipt"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    getReceipt: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the receipt to retrieve */
                receipt_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Objeto `Receipt` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Receipt"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    cancelReceipt: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the receipt to cancel */
                receipt_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Receipt object canceled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Receipt"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    downloadReceiptPdf: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the receipt to download */
                receipt_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description E-receipt in PDF format */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    sendReceiptByEmail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the e-receipt to send */
                receipt_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Email address to send the e-receipt. If not sent, the email registered by the customer will be used.
                     *      */
                    email: string | string[];
                };
            };
        };
        responses: {
            /** @description Generic response object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Indicates if the email was sent successfully */
                        ok: boolean;
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    invoiceReceipt: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the receipt to invoice */
                receipt_id: string;
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["ReceiptInvoice"];
        responses: {
            /** @description Nuevo `Invoice` object created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    createGlobalInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["ReceiptCreateGlobalInvoice"];
        responses: {
            /** @description New `Invoice` object creaded */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    listRetentions: {
        parameters: {
            query?: {
                /** @description Text search. Finds retentions with the specified text in the customer's `legal_name` or `tax_id`. */
                q?: string;
                /** @description ID of the customer to filter by. Only retentions issued to this customer will be returned. */
                customer?: string;
                /** @description Object with requested date range. */
                date?: components["parameters"]["SearchDate"];
                /** @description Page of results to return, starting from page 1. */
                page?: components["parameters"]["SearchPage"];
                /** @description Number from 1 to 100 representing the maximum amount of results to return for pagination purposes. */
                limit?: components["parameters"]["SearchLimit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RetentionSearchResult"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    createRetention: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["RetentionCreate"];
        responses: {
            /** @description New `Retention` object created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Retention"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    getRetention: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the retention to retrieve */
                retention_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description `Retention` object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Retention"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    cancelRetention: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the retention to cancel */
                retention_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description `Retention` object canceled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Retention"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    downloadRetention: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the retention to download */
                retention_id: string;
                /** @description Format to download */
                format: "xml" | "pdf" | "zip";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Official retention CFDI document in the requested format */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    sendRetentionByEmail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the retention to send */
                retention_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Email address to send the retention. If this parameter is not sent, the retention will be sent to the email that the customer has registered. */
                    email?: string | string[];
                };
            };
        };
        responses: {
            /** @description Generic response indicating if the email was sent successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Indicates if the email was sent successfully */
                        ok: boolean;
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    listOrganizations: {
        parameters: {
            query?: {
                /** @description Free text search. Text to search in `name` (commercial name) or `legal_name` (fiscal name) or `tax_id` (RFC). */
                q?: string;
                /** @description Object with requested date range. */
                date?: components["parameters"]["SearchDate"];
                /** @description Page of results to return, starting from page 1. */
                page?: components["parameters"]["SearchPage"];
                /** @description Number from 1 to 100 representing the maximum amount of results to return for pagination purposes. */
                limit?: components["parameters"]["SearchLimit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationSearchResult"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    createOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["OrganizationCreate"];
        responses: {
            /** @description New `Organization` object created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    editOrganizationLegal: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the organization to edit */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["OrganizationEditLegal"];
        responses: {
            /** @description Modified `Organization` object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    uploadOrganizationCertificate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the organization to upload certificates */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["OrganizationUploadCerts"];
        responses: {
            /** @description Modified `Organization` object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    deleteOrganizationCertificate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the organization to delete certificates */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Modified `Organization` object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationDeleteCerts"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    uploadOrganizationLogo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["OrganizationUploadLogo"];
        responses: {
            /** @description Modified `Organization` object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    editOrganizationCustomization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["OrganizationEditCustomization"];
        responses: {
            /** @description Modified `Organization` object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    editOrganizationReceiptsSettings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["OrganizationEditReceiptsSettings"];
        responses: {
            /** @description Modified `Organization` object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    checkDomainAvailability: {
        parameters: {
            query: {
                domain: components["schemas"]["DomainField"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response indicating if the domain is available.
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Indicates if the domain is available
                         * @example true
                         */
                        available: boolean;
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    editOrganizationDomain: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["OrganizationEditDomain"];
        responses: {
            /** @description Modified `Organization` object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    getOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description `Organization` object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    deleteOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description `Organization` object deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    getTestApiKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Test API Key */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    renewTestApiKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Test API Key */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    renewLiveApiKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Live API Key */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    listWebhooks: {
        parameters: {
            query?: {
                /** @description Page of results to return, starting from page 1. */
                page?: components["parameters"]["SearchPage"];
                /** @description Number from 1 to 100 representing the maximum amount of results to return for pagination purposes. */
                limit?: components["parameters"]["SearchLimit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookSearchResult"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    createWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["WebhookCreate"];
        responses: {
            /** @description An existing `Webhook` object with the same URL was found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Webhook"];
                };
            };
            /** @description New `Webhook` object */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Webhook"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    getWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the webhook */
                webhook_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description `Webhook` object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Webhook"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    editWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the webhook */
                webhook_id: string;
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["WebhookEdit"];
        responses: {
            /** @description `Webhook` object edited successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Webhook"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
    deleteWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the webhook */
                webhook_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description `Webhook` object deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Webhook"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthenticated"];
            500: components["responses"]["UnexpectedError"];
        };
    };
}
